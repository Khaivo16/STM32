<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\STM32CppOutput\F4Cpp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\STM32CppOutput\F4Cpp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Aug 04 11:48:53 2024
<BR><P>
<H3>Maximum Stack Usage =       1096 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; EthernetClass::begin(IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress) &rArr; stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[91]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[91]">ADC3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2b]">ADC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[93]">BDMA_Channel0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[94]">BDMA_Channel1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[95]">BDMA_Channel2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[96]">BDMA_Channel3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[97]">BDMA_Channel4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[98]">BDMA_Channel5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[99]">BDMA_Channel6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[13]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[72]">CEC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9b]">COMP1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a1]">CRS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[63]">CRYP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[62]">DCMI_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[82]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[83]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[84]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[85]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream0_IRQHandler</a> from sys.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream1_IRQHandler</a> from sys.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream2_IRQHandler</a> from sys.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream3_IRQHandler</a> from sys.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream4_IRQHandler</a> from sys.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream5_IRQHandler</a> from sys.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream6_IRQHandler</a> from sys.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[47]">DMA1_Stream7_IRQHandler</a> from sys.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6e]">DMA2D_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream0_IRQHandler</a> from sys.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream1_IRQHandler</a> from sys.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream2_IRQHandler</a> from sys.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream3_IRQHandler</a> from sys.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream4_IRQHandler</a> from sys.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream5_IRQHandler</a> from sys.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream6_IRQHandler</a> from sys.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream7_IRQHandler</a> from sys.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[92]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[16]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[55]">ETH_IRQHandler</a> from ethernetif.o(i.ETH_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a]">ETH_PHY_IO_DeInit</a> from ethernetif.o(i.ETH_PHY_IO_DeInit) referenced 4 times from ethernetif.o(.data)
 <LI><a href="#[d]">ETH_PHY_IO_GetTick</a> from ethernetif.o(i.ETH_PHY_IO_GetTick) referenced 4 times from ethernetif.o(.data)
 <LI><a href="#[9]">ETH_PHY_IO_Init</a> from ethernetif.o(i.ETH_PHY_IO_Init) referenced 4 times from ethernetif.o(.data)
 <LI><a href="#[c]">ETH_PHY_IO_ReadReg</a> from ethernetif.o(i.ETH_PHY_IO_ReadReg) referenced 4 times from ethernetif.o(.data)
 <LI><a href="#[b]">ETH_PHY_IO_WriteReg</a> from ethernetif.o(i.ETH_PHY_IO_WriteReg) referenced 4 times from ethernetif.o(.data)
 <LI><a href="#[56]">ETH_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1f]">EXTI0_IRQHandler</a> from sys.o(i.EXTI0_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[41]">EXTI15_10_IRQHandler</a> from sys.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[20]">EXTI1_IRQHandler</a> from sys.o(i.EXTI1_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[21]">EXTI2_IRQHandler</a> from sys.o(i.EXTI2_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[22]">EXTI3_IRQHandler</a> from sys.o(i.EXTI3_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[23]">EXTI4_IRQHandler</a> from sys.o(i.EXTI4_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[30]">EXTI9_5_IRQHandler</a> from sys.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2c]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2e]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2d]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[2f]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[57]">FDCAN_CAL_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1d]">FLASH_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[48]">FMC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[65]">FPU_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[64]">HASH_RNG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[81]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[7f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[80]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[90]">HSEM1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[39]">I2C1_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[38]">I2C1_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3b]">I2C2_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3a]">I2C2_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5d]">I2C3_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5c]">I2C3_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[74]">I2C4_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[73]">I2C4_EV_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8d]">JPEG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[71]">LPTIM1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9c]">LPTIM2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9d]">LPTIM3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9e]">LPTIM4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[9f]">LPTIM5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a0]">LPUART1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6d]">LTDC_ER_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6c]">LTDC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8c]">MDIOS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8e]">MDMA_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[12]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[77]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[76]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[79]">OTG_FS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[78]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1a]">PVD_AVD_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from stm32h7xx_it.o(i.PendSV_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[70]">QUADSPI_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1e]">RCC_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[42]">RTC_Alarm_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[1c]">RTC_WKUP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6b]">SAI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6f]">SAI2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[86]">SAI3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a2]">SAI4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[49]">SDMMC1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8f]">SDMMC2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[75]">SPDIF_RX_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4b]">SPI3_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[68]">SPI4_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[69]">SPI5_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[6a]">SPI6_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from stm32h7xx_it.o(i.SVC_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[87]">SWPMI1_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from stm32h7xx_it.o(i.SysTick_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a5]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h750xx.o(.text)
 <LI><a href="#[1b]">TAMP_STAMP_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[88]">TIM15_IRQHandler</a> from hardwaretimer.o(i.TIM15_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[89]">TIM16_IRQHandler</a> from hardwaretimer.o(i.TIM16_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[8a]">TIM17_IRQHandler</a> from hardwaretimer.o(i.TIM17_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[31]">TIM1_BRK_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[34]">TIM1_CC_IRQHandler</a> from hardwaretimer.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[33]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[32]">TIM1_UP_IRQHandler</a> from hardwaretimer.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[35]">TIM2_IRQHandler</a> from hardwaretimer.o(i.TIM2_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[36]">TIM3_IRQHandler</a> from hardwaretimer.o(i.TIM3_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[37]">TIM4_IRQHandler</a> from hardwaretimer.o(i.TIM4_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4a]">TIM5_IRQHandler</a> from hardwaretimer.o(i.TIM5_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4e]">TIM6_DAC_IRQHandler</a> from hardwaretimer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4f]">TIM7_IRQHandler</a> from hardwaretimer.o(i.TIM7_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[43]">TIM8_BRK_TIM12_IRQHandler</a> from hardwaretimer.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[46]">TIM8_CC_IRQHandler</a> from hardwaretimer.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[45]">TIM8_TRG_COM_TIM14_IRQHandler</a> from hardwaretimer.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[44]">TIM8_UP_TIM13_IRQHandler</a> from hardwaretimer.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4c]">UART4_IRQHandler</a> from sys.o(i.UART4_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[4d]">UART5_IRQHandler</a> from sys.o(i.UART5_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[66]">UART7_IRQHandler</a> from sys.o(i.UART7_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[67]">UART8_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from sys.o(i.USART1_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from sys.o(i.USART2_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from sys.o(i.USART3_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[5b]">USART6_IRQHandler</a> from sys.o(i.USART6_IRQHandler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[a3]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[19]">WWDG_IRQHandler</a> from startup_stm32h750xx.o(.text) referenced from startup_stm32h750xx.o(RESET)
 <LI><a href="#[ab]">tcp_accept_callback(void*, tcp_pcb*, signed char)</a> from stm32_eth.o(i._Z19tcp_accept_callbackPvP7tcp_pcba) referenced from ethernetserver.o(i._ZN14EthernetServer5beginEv)
 <LI><a href="#[b4]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[b1]">ethernet_link_status_updated(netif*)</a> from stm32_eth.o(i._Z28ethernet_link_status_updatedP5netif) referenced from stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce12Netif_ConfigEv)
 <LI><a href="#[c4]">USARTClass::write(unsigned char)</a> from usartclass.o(i._ZN10USARTClass5writeEh) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[c9]">EthernetClient::read()</a> from ethernetclient.o(i._ZN14EthernetClient4readEv) referenced from ethernetclient.o(.constdata__ZTV14EthernetClient)
 <LI><a href="#[ca]">EthernetClient::stop()</a> from ethernetclient.o(i._ZN14EthernetClient4stopEv) referenced from ethernetclient.o(.constdata__ZTV14EthernetClient)
 <LI><a href="#[c7]">EthernetClient::write(const unsigned char*, unsigned)</a> from ethernetclient.o(i._ZN14EthernetClient5writeEPKhj) referenced from ethernetclient.o(.constdata__ZTV14EthernetClient)
 <LI><a href="#[c6]">EthernetClient::write(unsigned char)</a> from ethernetclient.o(i._ZN14EthernetClient5writeEh) referenced from ethernetclient.o(.constdata__ZTV14EthernetClient)
 <LI><a href="#[c8]">EthernetClient::available()</a> from ethernetclient.o(i._ZN14EthernetClient9availableEv) referenced from ethernetclient.o(.constdata__ZTV14EthernetClient)
 <LI><a href="#[cb]">EthernetClient::connected()</a> from ethernetclient.o(i._ZN14EthernetClient9connectedEv) referenced from ethernetclient.o(.constdata__ZTV14EthernetClient)
 <LI><a href="#[cc]">EthernetClient::operator bool()</a> from ethernetclient.o(i._ZN14EthernetClientcvbEv) referenced from ethernetclient.o(.constdata__ZTV14EthernetClient)
 <LI><a href="#[cf]">EthernetServer::begin()</a> from ethernetserver.o(i._ZN14EthernetServer5beginEv) referenced from ethernetserver.o(.constdata__ZTV14EthernetServer)
 <LI><a href="#[ce]">EthernetServer::write(const unsigned char*, unsigned)</a> from ethernetserver.o(i._ZN14EthernetServer5writeEPKhj) referenced from ethernetserver.o(.constdata__ZTV14EthernetServer)
 <LI><a href="#[cd]">EthernetServer::write(unsigned char)</a> from ethernetserver.o(i._ZN14EthernetServer5writeEh) referenced from ethernetserver.o(.constdata__ZTV14EthernetServer)
 <LI><a href="#[b5]">[local to sys_c]::SPI_1_Init()</a> from sys.o(i._ZN26_INTERNAL_5_sys_c_GPIO_Set10SPI_1_InitEv) referenced from sys.o(i.__sti___5_sys_c_GPIO_Set)
 <LI><a href="#[b6]">[local to sys_c]::SPI_2_Init()</a> from sys.o(i._ZN26_INTERNAL_5_sys_c_GPIO_Set10SPI_2_InitEv) referenced from sys.o(i.__sti___5_sys_c_GPIO_Set)
 <LI><a href="#[b7]">[local to sys_c]::SPI_3_Init()</a> from sys.o(i._ZN26_INTERNAL_5_sys_c_GPIO_Set10SPI_3_InitEv) referenced from sys.o(i.__sti___5_sys_c_GPIO_Set)
 <LI><a href="#[bd]">[local to tcp_c]::tcp_accept_null(void*, tcp_pcb*, signed char)</a> from tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8515tcp_accept_nullEPvP7tcp_pcba) referenced from tcp.o(i.tcp_listen_with_backlog_and_err)
 <LI><a href="#[ac]">[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)</a> from dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f9dhcp_recvEPvP7udp_pcbP4pbufPK8ip4_addrt) referenced from dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f21dhcp_inc_pcb_refcountEv)
 <LI><a href="#[bb]">[local to netif_c]::netif_null_output_ip4(netif*, pbuf*, const ip4_addr*)</a> from netif.o(i._ZN28_INTERNAL_7_netif_c_8fba813721netif_null_output_ip4EP5netifP4pbufPK8ip4_addr) referenced from netif.o(i.netif_add)
 <LI><a href="#[ba]">[local to ip4_frag_c]::ipfrag_free_pbuf_custom(pbuf*)</a> from ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef23ipfrag_free_pbuf_customEP4pbuf) referenced from ip4_frag.o(i.ip4_frag)
 <LI><a href="#[ad]">[local to timeouts_c]::tcpip_tcp_timer(void*)</a> from timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7615tcpip_tcp_timerEPv) referenced from timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7615tcpip_tcp_timerEPv)
 <LI><a href="#[ad]">[local to timeouts_c]::tcpip_tcp_timer(void*)</a> from timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7615tcpip_tcp_timerEPv) referenced from timeouts.o(i.tcp_timer_needed)
 <LI><a href="#[ae]">[local to timeouts_c]::lwip_cyclic_timer(void*)</a> from timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7617lwip_cyclic_timerEPv) referenced from timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7617lwip_cyclic_timerEPv)
 <LI><a href="#[ae]">[local to timeouts_c]::lwip_cyclic_timer(void*)</a> from timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7617lwip_cyclic_timerEPv) referenced from timeouts.o(i.sys_timeouts_init)
 <LI><a href="#[a9]">[local to stm32_eth_cpp]::tcp_err_callback(void*, signed char)</a> from stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce16tcp_err_callbackEPva) referenced from stm32_eth.o(i._Z19tcp_accept_callbackPvP7tcp_pcba)
 <LI><a href="#[a8]">[local to stm32_eth_cpp]::tcp_recv_callback(void*, tcp_pcb*, pbuf*, signed char)</a> from stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce17tcp_recv_callbackEPvP7tcp_pcbP4pbufa) referenced from stm32_eth.o(i._Z19tcp_accept_callbackPvP7tcp_pcba)
 <LI><a href="#[aa]">[local to stm32_eth_cpp]::tcp_sent_callback(void*, tcp_pcb*, unsigned short)</a> from stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce17tcp_sent_callbackEPvP7tcp_pcbt) referenced from stm32_eth.o(i._Z19tcp_accept_callbackPvP7tcp_pcba)
 <LI><a href="#[b2]">[local to stm32_eth_cpp]::scheduler_callback(HardwareTimer*)</a> from stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce18scheduler_callbackEP13HardwareTimer) referenced from stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce20TIM_scheduler_ConfigEv)
 <LI><a href="#[b9]">[local to ethernetif_cpp]::low_level_output(netif*, pbuf*)</a> from ethernetif.o(i._ZN36_INTERNAL_14_ethernetif_cpp_04a99f9b16low_level_outputEP5netifP4pbuf) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[a7]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[c5]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[c5]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[c5]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from ethernetserver.o(.constdata__ZTV6Server)
 <LI><a href="#[c5]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from ethernetclient.o(.constdata__ZTV6Stream)
 <LI><a href="#[e]">String::StringIfHelper() const</a> from stm32_eth.o(i._ZNK6String14StringIfHelperEv) referenced 2 times from stm32_eth.o(.data)
 <LI><a href="#[d1]">IPAddress::printTo(Print&) const</a> from ipaddress.o(i._ZNK9IPAddress7printToER5Print) referenced from ipaddress.o(.constdata__ZTV9IPAddress)
 <LI><a href="#[d0]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[d0]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 12 times from ethernetclient.o(.constdata__ZTV6Client)
 <LI><a href="#[d0]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from ethernetserver.o(.constdata__ZTV6Server)
 <LI><a href="#[d0]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 5 times from ethernetclient.o(.constdata__ZTV6Stream)
 <LI><a href="#[d0]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from ethernetclient.o(.constdata__ZTV9Printable)
 <LI><a href="#[a6]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h750xx.o(.text)
 <LI><a href="#[da]">__sti___13_IPAddress_cpp_0fe1e075</a> from ipaddress.o(i.__sti___13_IPAddress_cpp_0fe1e075) referenced from ipaddress.o(.init_array)
 <LI><a href="#[db]">__sti___13_stm32_eth_cpp_0d3fddce</a> from stm32_eth.o(i.__sti___13_stm32_eth_cpp_0d3fddce) referenced from stm32_eth.o(.init_array)
 <LI><a href="#[d7]">__sti___14_ethernetif_cpp_04a99f9b</a> from ethernetif.o(i.__sti___14_ethernetif_cpp_04a99f9b) referenced from ethernetif.o(.init_array)
 <LI><a href="#[d5]">__sti___15_EthernetUdp_cpp_3bc8c3f9</a> from ethernetudp.o(i.__sti___15_EthernetUdp_cpp_3bc8c3f9) referenced from ethernetudp.o(.init_array)
 <LI><a href="#[d6]">__sti___17_STM32Ethernet_cpp_45d98dc9</a> from stm32ethernet.o(i.__sti___17_STM32Ethernet_cpp_45d98dc9) referenced from stm32ethernet.o(.init_array)
 <LI><a href="#[d3]">__sti___18_EthernetClient_cpp_9c6d844e</a> from ethernetclient.o(i.__sti___18_EthernetClient_cpp_9c6d844e) referenced from ethernetclient.o(.init_array)
 <LI><a href="#[d4]">__sti___18_EthernetServer_cpp_6b0e7c9c</a> from ethernetserver.o(i.__sti___18_EthernetServer_cpp_6b0e7c9c) referenced from ethernetserver.o(.init_array)
 <LI><a href="#[d9]">__sti___5_sys_c_GPIO_Set</a> from sys.o(i.__sti___5_sys_c_GPIO_Set) referenced from sys.o(.init_array)
 <LI><a href="#[d8]">__sti___6_main_c_ip</a> from main.o(i.__sti___6_main_c_ip) referenced from main.o(.init_array)
 <LI><a href="#[d2]">__sti___7_Dns_cpp_47d277ed</a> from dns_1.o(i.__sti___7_Dns_cpp_47d277ed) referenced from dns_1.o(.init_array)
 <LI><a href="#[c1]">dhcp_coarse_tmr</a> from dhcp.o(i.dhcp_coarse_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[c2]">dhcp_fine_tmr</a> from dhcp.o(i.dhcp_fine_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[c3]">dns_tmr</a> from dns.o(i.dns_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[b8]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[c0]">etharp_tmr</a> from etharp.o(i.etharp_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[af]">ethernet_input</a> from ethernet.o(i.ethernet_input) referenced from stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce12Netif_ConfigEv)
 <LI><a href="#[b0]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce12Netif_ConfigEv)
 <LI><a href="#[bf]">ip_reass_tmr</a> from ip4_frag.o(i.ip_reass_tmr) referenced from timeouts.o(.constdata)
 <LI><a href="#[a4]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[b3]">pbuf_free_custom</a> from ethernetif.o(i.pbuf_free_custom) referenced from ethernetif.o(i._ZN36_INTERNAL_14_ethernetif_cpp_04a99f9b15low_level_inputEP5netif)
 <LI><a href="#[bc]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[be]">tcp_tmr</a> from tcp.o(i.tcp_tmr) referenced from timeouts.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a6]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(.text)
</UL>
<P><STRONG><a name="[29b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[dd]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[eb]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[df]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[29d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[29e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[29f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2a0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ae]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_create_txid()
</UL>

<P><STRONG><a name="[2a1]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_enqueue_new_datagram(ip_hdr*, int)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a3]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2a6]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_parse_reply(pbuf*, dhcp*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_enqueue_new_datagram(ip_hdr*, int)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_output(netif*, pbuf*)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>

<P><STRONG><a name="[260]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[dc]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[b4]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[e2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2a9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2aa]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[e8]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[254]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[e6]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[e7]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[de]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2ab]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2ac]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>ETH_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ETH_IRQHandler &rArr; HAL_ETH_IRQHandler &rArr; HAL_ETH_RxCpltCallback &rArr; ethernetif_input &rArr; [local to ethernetif_cpp]::low_level_input(netif*) &rArr; pbuf_alloced_custom &rArr; [local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>ETH_PHY_IO_DeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethernetif.o(i.ETH_PHY_IO_DeInit))
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>ETH_PHY_IO_GetTick</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_PHY_IO_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_PHY_IO_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>ETH_PHY_IO_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_PHY_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ETH_PHY_IO_Init &rArr; HAL_ETH_SetMDIOClockRange &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMDIOClockRange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>ETH_PHY_IO_ReadReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ethernetif.o(i.ETH_PHY_IO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_PHY_IO_ReadReg &rArr; HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>ETH_PHY_IO_WriteReg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ethernetif.o(i.ETH_PHY_IO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ETH_PHY_IO_WriteReg &rArr; HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, sys.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, sys.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerClkSrc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerUpIrq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerCCIrq
</UL>

<P><STRONG><a name="[f2]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[241]"></a>HAL_ETH_BuildRxDescriptors</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_BuildRxDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ETH_BuildRxDescriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_input(netif*)
</UL>

<P><STRONG><a name="[f8]"></a>HAL_ETH_DMAErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_DMAErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[23c]"></a>HAL_ETH_DescAssignMemory</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_DescAssignMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ETH_DescAssignMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
</UL>

<P><STRONG><a name="[fb]"></a>HAL_ETH_EEECallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_EEECallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[266]"></a>HAL_ETH_GetMACConfig</STRONG> (Thumb, 470 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetMACConfig))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[f3]"></a>HAL_ETH_GetRxDataBuffer</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetRxDataBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ETH_GetRxDataBuffer &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_input(netif*)
</UL>

<P><STRONG><a name="[f5]"></a>HAL_ETH_GetRxDataLength</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_GetRxDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_ETH_GetRxDataLength &rArr; HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_input(netif*)
</UL>

<P><STRONG><a name="[ec]"></a>HAL_ETH_IRQHandler</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_ETH_IRQHandler &rArr; HAL_ETH_RxCpltCallback &rArr; ethernetif_input &rArr; [local to ethernetif_cpp]::low_level_input(netif*) &rArr; pbuf_alloced_custom &rArr; [local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WakeUpCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_TxCpltCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_PMTCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MACErrorCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_EEECallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DMAErrorCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_ETH_Init</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_ETH_Init &rArr; [local to stm32h7xx_hal_eth_c]::ETH_MACDMAConfig(ETH_HandleTypeDef*) &rArr; [local to stm32h7xx_hal_eth_c]::ETH_SetMACConfig(ETH_HandleTypeDef*, ETH_MACConfigTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSCFG_ETHInterfaceSelect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_DMATxDescListInit(ETH_HandleTypeDef*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_DMARxDescListInit(ETH_HandleTypeDef*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_MACDMAConfig(ETH_HandleTypeDef*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
</UL>

<P><STRONG><a name="[f4]"></a>HAL_ETH_IsRxDataAvailable</STRONG> (Thumb, 254 bytes, Stack size 20 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_IsRxDataAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ETH_IsRxDataAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_input(netif*)
</UL>

<P><STRONG><a name="[f9]"></a>HAL_ETH_MACErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_MACErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_ETH_MspInit</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ethernetif.o(i.HAL_ETH_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ETH_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_ETH_PMTCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_PMTCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_ETH_ReadPHYRegister</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_ReadPHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_IO_ReadReg
</UL>

<P><STRONG><a name="[f6]"></a>HAL_ETH_RxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernetif.o(i.HAL_ETH_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_ETH_RxCpltCallback &rArr; ethernetif_input &rArr; [local to ethernetif_cpp]::low_level_input(netif*) &rArr; pbuf_alloced_custom &rArr; [local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>HAL_ETH_SetMACConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_SetMACConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ETH_SetMACConfig &rArr; [local to stm32h7xx_hal_eth_c]::ETH_SetMACConfig(ETH_HandleTypeDef*, ETH_MACConfigTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_SetMACConfig(ETH_HandleTypeDef*, ETH_MACConfigTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[ee]"></a>HAL_ETH_SetMDIOClockRange</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_SetMDIOClockRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ETH_SetMDIOClockRange &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_IO_Init
</UL>

<P><STRONG><a name="[267]"></a>HAL_ETH_Start</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Start))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[263]"></a>HAL_ETH_Stop</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[10b]"></a>HAL_ETH_Transmit</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ETH_Transmit &rArr; [local to stm32h7xx_hal_eth_c]::ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef*, ETH_TxPacketConfig*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef*, ETH_TxPacketConfig*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_output(netif*, pbuf*)
</UL>

<P><STRONG><a name="[f7]"></a>HAL_ETH_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>HAL_ETH_WakeUpCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_WakeUpCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>HAL_ETH_WritePHYRegister</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(i.HAL_ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ETH_WritePHYRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_IO_WriteReg
</UL>

<P><STRONG><a name="[14e]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_EnableCompensationCell))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f1]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_GPIO_Init</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sys_c]::SPI_3_Init()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sys_c]::SPI_2_Init()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sys_c]::SPI_1_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[115]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRSConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ed]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_WritePHYRegister
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_ReadPHYRegister
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHY_IO_GetTick
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL3_Config(RCC_PLL3InitTypeDef*, unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL2_Config(RCC_PLL2InitTypeDef*, unsigned)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_Periodic_Handle(netif*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[149]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>HAL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MPU_Config()
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_MPU_Disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MPU_Config()
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_MPU_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MPU_Config()
</UL>

<P><STRONG><a name="[111]"></a>HAL_MspInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[178]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[107]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[106]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_MspInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[10e]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[114]"></a>HAL_RCCEx_CRSConfig</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_CRSConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_CRSConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[116]"></a>HAL_RCCEx_GetD1SysClockFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD1SysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[117]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[151]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[152]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[190]"></a>HAL_RCCEx_GetPeriphCLKConfig</STRONG> (Thumb, 436 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>

<P><STRONG><a name="[118]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2204 bytes, Stack size 48 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; [local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL3_Config(RCC_PLL3InitTypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL3_Config(RCC_PLL3InitTypeDef*, unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL2_Config(RCC_PLL2InitTypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[18e]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMDIOClockRange
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD1SysClockFreq
</UL>

<P><STRONG><a name="[11e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1242 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ff]"></a>HAL_SYSCFG_ETHInterfaceSelect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_SYSCFG_ETHInterfaceSelect))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[11f]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[136]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>HAL_TIMEx_OCN_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_OCN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_OCN_Start &rArr; [local to stm32h7xx_hal_tim_ex_c]::TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_ex_c]::TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32h7xx_hal_tim_ex.o(i.HAL_TIMEx_PWMN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_PWMN_Start &rArr; [local to stm32h7xx_hal_tim_ex_c]::TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_ex_c]::TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[125]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableTimerClock
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerUpIrq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerCCIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[192]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resume()
</UL>

<P><STRONG><a name="[12a]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; [local to stm32h7xx_hal_tim_c]::TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIM_IC_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[131]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; [local to stm32h7xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC5_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; [local to stm32h7xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC5_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[133]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[134]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[145]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[262]"></a>LAN8742_GetLinkState</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, lan8742.o(i.LAN8742_GetLinkState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LAN8742_GetLinkState
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[23f]"></a>LAN8742_Init</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lan8742.o(i.LAN8742_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LAN8742_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
</UL>

<P><STRONG><a name="[23e]"></a>LAN8742_RegisterBusIO</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lan8742.o(i.LAN8742_RegisterBusIO))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
</UL>

<P><STRONG><a name="[12]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[14a]"></a>SystemClock_Config</STRONG> (Thumb, 564 bytes, Stack size 336 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; [local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL3_Config(RCC_PLL3InitTypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRSConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>SystemInit</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, system_stm32h7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>TIM15_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM15_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>TIM16_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM17_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_UP_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[126]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32h7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[130]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
</UL>

<P><STRONG><a name="[13b]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[12d]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[4c]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART5_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>UART7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART7_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[148]"></a>UART_CheckIdleState</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[146]"></a>UART_SetConfig</STRONG> (Thumb, 3084 bytes, Stack size 64 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[150]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USART6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART6_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h750xx.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, stm32_eth.o(i._Z14stm32_eth_initPKhS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_set_mac_addr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::TIM_scheduler_Config()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::Netif_Config()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_notification(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress)
</UL>

<P><STRONG><a name="[15a]"></a>stm32_get_data(pbuf_data*, unsigned char*, unsigned)</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32_eth.o(i._Z14stm32_get_dataP9pbuf_dataPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = stm32_get_data(pbuf_data*, unsigned char*, unsigned) &rArr; stm32_free_data(pbuf*) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_free_data(pbuf*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::read()
</UL>

<P><STRONG><a name="[195]"></a>get_timer_index(TIM_TypeDef*)</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, hardwaretimer.o(i._Z15get_timer_indexP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_timer_index(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[15d]"></a>stm32_free_data(pbuf*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32_eth.o(i._Z15stm32_free_dataP4pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = stm32_free_data(pbuf*) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_data(pbuf_data*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[158]"></a>User_notification(netif*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_eth.o(i._Z17User_notificationP5netif))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
</UL>

<P><STRONG><a name="[15f]"></a>stm32_DHCP_process(netif*)</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32_eth.o(i._Z18stm32_DHCP_processP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_Periodic_Handle(netif*)
</UL>

<P><STRONG><a name="[159]"></a>stm32_eth_scheduler()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32_eth.o(i._Z19stm32_eth_schedulerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_Periodic_Handle(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::available()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::write(const unsigned char*, unsigned)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::scheduler_callback(HardwareTimer*)
</UL>

<P><STRONG><a name="[ab]"></a>tcp_accept_callback(void*, tcp_pcb*, signed char)</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32_eth.o(i._Z19tcp_accept_callbackPvP7tcp_pcba))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_accept_callback(void*, tcp_pcb*, signed char) &rArr; tcp_connection_close(tcp_pcb*, tcp_struct*) &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_setprio
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetserver.o(i._ZN14EthernetServer5beginEv)
</UL>
<P><STRONG><a name="[26e]"></a>lwip_standard_chksum(const void*, int)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i._Z20lwip_standard_chksumPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
</UL>

<P><STRONG><a name="[184]"></a>stm32_eth_get_ipaddr()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_eth.o(i._Z20stm32_eth_get_ipaddrv))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::localIP()
</UL>

<P><STRONG><a name="[16c]"></a>tcp_connection_close(tcp_pcb*, tcp_struct*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32_eth.o(i._Z20tcp_connection_closeP7tcp_pcbP10tcp_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_connection_close(tcp_pcb*, tcp_struct*) &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::stop()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::tcp_recv_callback(void*, tcp_pcb*, pbuf*, signed char)
</UL>

<P><STRONG><a name="[171]"></a>stm32_DHCP_manual_config()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_eth.o(i._Z24stm32_DHCP_manual_configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = stm32_DHCP_manual_config() &rArr; dhcp_inform &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress)
</UL>

<P><STRONG><a name="[165]"></a>stm32_DHCP_Periodic_Handle(netif*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_eth.o(i._Z26stm32_DHCP_Periodic_HandleP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_process(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
</UL>

<P><STRONG><a name="[b1]"></a>ethernet_link_status_updated(netif*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_eth.o(i._Z28ethernet_link_status_updatedP5netif))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::Netif_Config()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce12Netif_ConfigEv)
</UL>
<P><STRONG><a name="[174]"></a>RingBuffer::store_char(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBuffer10store_charEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::store_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[173]"></a>RingBuffer::RingBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::RingBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_GPIO_Set
</UL>

<P><STRONG><a name="[2b0]"></a>RingBuffer::RingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev), UNUSED)

<P><STRONG><a name="[14f]"></a>USARTClass::IrqHandler()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usartclass.o(i._ZN10USARTClass10IrqHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::store_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>USARTClass::begin(unsigned)</STRONG> (Thumb, 708 bytes, Stack size 192 bytes, usartclass.o(i._ZN10USARTClass5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = USARTClass::begin(unsigned) &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>USARTClass::write(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass5writeEh))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[257]"></a>USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_GPIO_Set
</UL>

<P><STRONG><a name="[2b1]"></a>USARTClass::USARTClass__sub_object(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer), UNUSED)

<P><STRONG><a name="[181]"></a>EthernetClass::MACAddressDefault()</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32ethernet.o(i._ZN13EthernetClass17MACAddressDefaultEv))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress)
</UL>

<P><STRONG><a name="[179]"></a>EthernetClass::begin(IPAddress)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, stm32ethernet.o(i._ZN13EthernetClass5beginE9IPAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = EthernetClass::begin(IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress) &rArr; stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(const IPAddress&)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>EthernetClass::begin(IPAddress, IPAddress)</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, stm32ethernet.o(i._ZN13EthernetClass5beginE9IPAddressS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = EthernetClass::begin(IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress) &rArr; stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::operator [](int)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(const IPAddress&)
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress)
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress)
</UL>

<P><STRONG><a name="[17e]"></a>EthernetClass::begin(IPAddress, IPAddress, IPAddress)</STRONG> (Thumb, 96 bytes, Stack size 80 bytes, stm32ethernet.o(i._ZN13EthernetClass5beginE9IPAddressS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = EthernetClass::begin(IPAddress, IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress) &rArr; stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::operator [](int)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(const IPAddress&)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress)
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress)
</UL>

<P><STRONG><a name="[17f]"></a>EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress)</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, stm32ethernet.o(i._ZN13EthernetClass5beginE9IPAddressS0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress) &rArr; stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_manual_config()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::operator =(const IPAddress&)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::raw_address()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::MACAddressDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress)
</UL>

<P><STRONG><a name="[183]"></a>EthernetClass::localIP()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32ethernet.o(i._ZN13EthernetClass7localIPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EthernetClass::localIP()
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_get_ipaddr()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>HardwareTimer::getChannel(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer10getChannelEj))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[186]"></a>HardwareTimer::setOverflow(unsigned, TimerFormat_t)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hardwaretimer.o(i._ZN13HardwareTimer11setOverflowEj13TimerFormat_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HardwareTimer::setOverflow(unsigned, TimerFormat_t) &rArr; HardwareTimer::getTimerClkFreq() &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::TIM_scheduler_Config()
</UL>

<P><STRONG><a name="[18b]"></a>HardwareTimer::getLLChannel(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer12getLLChannelEj))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[188]"></a>HardwareTimer::resumeChannel(unsigned)</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, hardwaretimer.o(i._ZN13HardwareTimer13resumeChannelEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HardwareTimer::resumeChannel(unsigned) &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getIT(unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getAssociatedChannel(unsigned)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getLLChannel(unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getChannel(unsigned)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resume()
</UL>

<P><STRONG><a name="[143]"></a>HardwareTimer::updateCallback(TIM_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardwaretimer.o(i._ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[23a]"></a>HardwareTimer::attachInterrupt(void(*)(HardwareTimer*))</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer15attachInterruptEPFvPS_E))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::TIM_scheduler_Config()
</UL>

<P><STRONG><a name="[187]"></a>HardwareTimer::getTimerClkFreq()</STRONG> (Thumb, 198 bytes, Stack size 240 bytes, hardwaretimer.o(i._ZN13HardwareTimer15getTimerClkFreqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = HardwareTimer::getTimerClkFreq() &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerClkSrc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setOverflow(unsigned, TimerFormat_t)
</UL>

<P><STRONG><a name="[18c]"></a>HardwareTimer::getAssociatedChannel(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer20getAssociatedChannelEj))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[12b]"></a>HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hardwaretimer.o(i._ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[18a]"></a>HardwareTimer::getIT(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer5getITEj))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[191]"></a>HardwareTimer::resume()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hardwaretimer.o(i._ZN13HardwareTimer6resumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HardwareTimer::resume() &rArr; HardwareTimer::resumeChannel(unsigned) &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::TIM_scheduler_Config()
</UL>

<P><STRONG><a name="[193]"></a>HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)</STRONG> (Thumb, 510 bytes, Stack size 128 bytes, hardwaretimer.o(i._ZN13HardwareTimer7setModeEj12TimerModes_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HardwareTimer::setMode(unsigned, TimerModes_t, unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getAssociatedChannel(unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getChannel(unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::TIM_scheduler_Config()
</UL>

<P><STRONG><a name="[194]"></a>HardwareTimer::HardwareTimer(TIM_TypeDef*)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hardwaretimer.o(i._ZN13HardwareTimerC1EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardwareTimer::HardwareTimer(TIM_TypeDef*) &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableTimerClock
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_index(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::TIM_scheduler_Config()
</UL>

<P><STRONG><a name="[2b2]"></a>HardwareTimer::HardwareTimer__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, hardwaretimer.o(i._ZN13HardwareTimerC1EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[c9]"></a>EthernetClient::read()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernetclient.o(i._ZN14EthernetClient4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EthernetClient::read() &rArr; stm32_get_data(pbuf_data*, unsigned char*, unsigned) &rArr; stm32_free_data(pbuf*) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_data(pbuf_data*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.constdata__ZTV14EthernetClient)
</UL>
<P><STRONG><a name="[ca]"></a>EthernetClient::stop()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ethernetclient.o(i._ZN14EthernetClient4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = EthernetClient::stop() &rArr; tcp_connection_close(tcp_pcb*, tcp_struct*) &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::status()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.constdata__ZTV14EthernetClient)
</UL>
<P><STRONG><a name="[c7]"></a>EthernetClient::write(const unsigned char*, unsigned)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ethernetclient.o(i._ZN14EthernetClient5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = EthernetClient::write(const unsigned char*, unsigned) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::write(const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.constdata__ZTV14EthernetClient)
</UL>
<P><STRONG><a name="[c6]"></a>EthernetClient::write(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ethernetclient.o(i._ZN14EthernetClient5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EthernetClient::write(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.constdata__ZTV14EthernetClient)
</UL>
<P><STRONG><a name="[196]"></a>EthernetClient::status()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ethernetclient.o(i._ZN14EthernetClient6statusEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::available()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::accept()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::write(const unsigned char*, unsigned)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::connected()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::stop()
</UL>

<P><STRONG><a name="[c8]"></a>EthernetClient::available()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ethernetclient.o(i._ZN14EthernetClient9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = EthernetClient::available() &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::available()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.constdata__ZTV14EthernetClient)
</UL>
<P><STRONG><a name="[cb]"></a>EthernetClient::connected()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ethernetclient.o(i._ZN14EthernetClient9connectedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EthernetClient::connected()
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::status()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.constdata__ZTV14EthernetClient)
</UL>
<P><STRONG><a name="[199]"></a>EthernetClient::EthernetClient(tcp_struct*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethernetclient.o(i._ZN14EthernetClientC1EP10tcp_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EthernetClient::EthernetClient(tcp_struct*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client::Client__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::available()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::accept()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[2b3]"></a>EthernetClient::EthernetClient__sub_object(tcp_struct*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ethernetclient.o(i._ZN14EthernetClientC1EP10tcp_struct), UNUSED)

<P><STRONG><a name="[cc]"></a>EthernetClient::operator bool()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ethernetclient.o(i._ZN14EthernetClientcvbEv))
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.constdata__ZTV14EthernetClient)
</UL>
<P><STRONG><a name="[cf]"></a>EthernetServer::begin()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ethernetserver.o(i._ZN14EthernetServer5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = EthernetServer::begin() &rArr; tcp_new &rArr; tcp_alloc &rArr; [local to tcp_c]::tcp_kill_prio(unsigned char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetserver.o(.constdata__ZTV14EthernetServer)
</UL>
<P><STRONG><a name="[ce]"></a>EthernetServer::write(const unsigned char*, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, ethernetserver.o(i._ZN14EthernetServer5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = EthernetServer::write(const unsigned char*, unsigned) &rArr; EthernetClient::write(const unsigned char*, unsigned) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::accept()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::EthernetClient(tcp_struct*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::status()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::write(const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetserver.o(.constdata__ZTV14EthernetServer)
</UL>
<P><STRONG><a name="[cd]"></a>EthernetServer::write(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ethernetserver.o(i._ZN14EthernetServer5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EthernetServer::write(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetserver.o(.constdata__ZTV14EthernetServer)
</UL>
<P><STRONG><a name="[19f]"></a>EthernetServer::accept()</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, ethernetserver.o(i._ZN14EthernetServer6acceptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EthernetServer::accept() &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::EthernetClient(tcp_struct*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::status()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::available()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1a0]"></a>EthernetServer::available()</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, ethernetserver.o(i._ZN14EthernetServer9availableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = EthernetServer::available() &rArr; EthernetClient::available() &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::accept()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::EthernetClient(tcp_struct*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::available()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::status()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[259]"></a>EthernetServer::EthernetServer(unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, ethernetserver.o(i._ZN14EthernetServerC1Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EthernetServer::EthernetServer(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_ip
</UL>

<P><STRONG><a name="[2b4]"></a>EthernetServer::EthernetServer__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 28 bytes, ethernetserver.o(i._ZN14EthernetServerC1Et), UNUSED)

<P><STRONG><a name="[246]"></a>Print::printNumber(unsigned long, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, print.o(i._ZN5Print11printNumberEmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>

<P><STRONG><a name="[248]"></a>Print::print(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[250]"></a>Print::print(const Printable&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printERK9Printable))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const Printable&)
</UL>

<P><STRONG><a name="[24c]"></a>Print::print(char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::printTo(Print&) const
</UL>

<P><STRONG><a name="[249]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::printTo(Print&) const
</UL>

<P><STRONG><a name="[252]"></a>Print::print(int, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24b]"></a>Print::print(long, int)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEli), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[24a]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>

<P><STRONG><a name="[247]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[c5]"></a>Print::write(const unsigned char*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, print.o(i._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> ethernetclient.o(.constdata__ZTV6Stream)
<LI> ethernetserver.o(.constdata__ZTV6Server)
<LI> usartclass.o(.constdata__ZTV10USARTClass)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[24d]"></a>Print::println(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24f]"></a>Print::println(const Printable&)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnERK9Printable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const Printable&) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const Printable&)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[251]"></a>Print::println(int, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(int, int) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24e]"></a>Print::println()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const Printable&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>Client::Client__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ethernetclient.o(i._ZN6ClientC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::EthernetClient(tcp_struct*)
</UL>

<P><STRONG><a name="[258]"></a>SPIClass::SPIClass(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIClass::SPIClass(SPI_TypeDef*, void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_GPIO_Set
</UL>

<P><STRONG><a name="[2b5]"></a>SPIClass::SPIClass__sub_object(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE), UNUSED)

<P><STRONG><a name="[180]"></a>IPAddress::raw_address()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32ethernet.o(i._ZN9IPAddress11raw_addressEv))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress)
</UL>

<P><STRONG><a name="[17b]"></a>IPAddress::IPAddress(const IPAddress&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernetudp.o(i._ZN9IPAddressC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress)
</UL>

<P><STRONG><a name="[2b6]"></a>IPAddress::IPAddress__sub_object(const IPAddress&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ethernetudp.o(i._ZN9IPAddressC1ERKS_), UNUSED)

<P><STRONG><a name="[17a]"></a>IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, ipaddress.o(i._ZN9IPAddressC1Ehhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_EthernetClient_cpp_9c6d844e
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___7_Dns_cpp_47d277ed
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_STM32Ethernet_cpp_45d98dc9
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_EthernetUdp_cpp_3bc8c3f9
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_EthernetServer_cpp_6b0e7c9c
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_ip
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_ethernetif_cpp_04a99f9b
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_stm32_eth_cpp_0d3fddce
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_IPAddress_cpp_0fe1e075
</UL>

<P><STRONG><a name="[2b7]"></a>IPAddress::IPAddress__sub_object(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, ipaddress.o(i._ZN9IPAddressC1Ehhhh), UNUSED)

<P><STRONG><a name="[185]"></a>IPAddress::IPAddress(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipaddress.o(i._ZN9IPAddressC1Ej))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::localIP()
</UL>

<P><STRONG><a name="[2b8]"></a>IPAddress::IPAddress__sub_object(unsigned)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ipaddress.o(i._ZN9IPAddressC1Ej), UNUSED)

<P><STRONG><a name="[256]"></a>IPAddress::IPAddress()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ipaddress.o(i._ZN9IPAddressC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_STM32Ethernet_cpp_45d98dc9
</UL>

<P><STRONG><a name="[2b9]"></a>IPAddress::IPAddress__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ipaddress.o(i._ZN9IPAddressC1Ev), UNUSED)

<P><STRONG><a name="[182]"></a>IPAddress::operator =(const IPAddress&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32ethernet.o(i._ZN9IPAddressaSERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress)
</UL>

<P><STRONG><a name="[17d]"></a>IPAddress::operator [](int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dns_1.o(i._ZN9IPAddressixEi))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress, IPAddress)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress, IPAddress)
</UL>

<P><STRONG><a name="[e]"></a>String::StringIfHelper() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_eth.o(i._ZNK6String14StringIfHelperEv))
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(.data)
</UL>
<P><STRONG><a name="[d1]"></a>IPAddress::printTo(Print&) const</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ipaddress.o(i._ZNK9IPAddress7printToER5Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IPAddress::printTo(Print&) const &rArr; Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.constdata__ZTV9IPAddress)
</UL>
<P><STRONG><a name="[239]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::TIM_scheduler_Config()
</UL>

<P><STRONG><a name="[d0]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 5]<UL><LI> ethernetclient.o(.constdata__ZTV6Stream)
<LI> ethernetclient.o(.constdata__ZTV9Printable)
<LI> ethernetclient.o(.constdata__ZTV6Client)
<LI> ethernetserver.o(.constdata__ZTV6Server)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[e9]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[2ba]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2bb]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2bc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[25a]"></a>delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>dhcp_arp_reply</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dhcp_arp_reply &rArr; [local to dhcp_c]::dhcp_decline(netif*) &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[c1]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_t2_timeout(netif*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_t1_timeout(netif*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>dhcp_fine_tmr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = dhcp_fine_tmr &rArr; [local to dhcp_c]::dhcp_timeout(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_timeout(netif*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>dhcp_inform</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, dhcp.o(i.dhcp_inform))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dhcp_inform &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_inc_pcb_refcount()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_dec_pcb_refcount()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_short(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_manual_config()
</UL>

<P><STRONG><a name="[25c]"></a>dhcp_network_changed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_network_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = dhcp_network_changed &rArr; [local to dhcp_c]::dhcp_reboot(netif*) &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[1e2]"></a>dhcp_release_and_stop</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_release_and_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_dec_pcb_refcount()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_long(unsigned short, unsigned char*, unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_timeout(netif*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1e9]"></a>dhcp_renew</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_short(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_t1_timeout(netif*)
</UL>

<P><STRONG><a name="[160]"></a>dhcp_start</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_inc_pcb_refcount()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_dec_pcb_refcount()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_timeout(netif*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_process(netif*)
</UL>

<P><STRONG><a name="[162]"></a>dhcp_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = dhcp_stop &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_process(netif*)
</UL>

<P><STRONG><a name="[161]"></a>dhcp_supplied_address</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_supplied_address))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_DHCP_process(netif*)
</UL>

<P><STRONG><a name="[27f]"></a>digitalWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27c]"></a>dns_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dns.o(i.dns_init))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1e5]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_ack(netif*, dhcp_msg*)
</UL>

<P><STRONG><a name="[c3]"></a>dns_tmr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dns.o(i.dns_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dns_tmr &rArr; [local to dns_c]::dns_check_entries() &rArr; [local to dns_c]::dns_check_entry(unsigned char) &rArr; [local to dns_c]::dns_send(unsigned char) &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_check_entries()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>enableTimerClock</STRONG> (Thumb, 346 bytes, Stack size 12 bytes, timer.o(i.enableTimerClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enableTimerClock
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[25d]"></a>etharp_cleanup_netif</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = etharp_cleanup_netif &rArr; [local to etharp_c]::etharp_free_entry(int) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_free_entry(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[25e]"></a>etharp_input</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, etharp.o(i.etharp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = etharp_input &rArr; dhcp_arp_reply &rArr; [local to dhcp_c]::dhcp_decline(netif*) &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_update_arp_entry(netif*, const ip4_addr*, eth_addr*, unsigned char)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[b8]"></a>etharp_output</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_output_to_arp_index(netif*, pbuf*, unsigned char)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[1d1]"></a>etharp_query</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_find_entry(const ip4_addr*, unsigned char, netif*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_check(netif*)
</UL>

<P><STRONG><a name="[1ff]"></a>etharp_request</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = etharp_request &rArr; [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_issue_reports(netif*, unsigned char)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_output_to_arp_index(netif*, pbuf*, unsigned char)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[c0]"></a>etharp_tmr</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_free_entry(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>ethernet_input</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ethernet.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; [local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*) &rArr; tcp_alloc &rArr; [local to tcp_c]::tcp_kill_prio(unsigned char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce12Netif_ConfigEv)
</UL>
<P><STRONG><a name="[164]"></a>ethernet_link_check_state</STRONG> (Thumb, 186 bytes, Stack size 128 bytes, ethernetif.o(i.ethernet_link_check_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ethernet_link_check_state &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; [local to dhcp_c]::dhcp_reboot(netif*) &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Stop
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Start
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetMACConfig
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_down
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_GetLinkState
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::Netif_Config()
</UL>

<P><STRONG><a name="[204]"></a>ethernet_output</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, ethernet.o(i.ethernet_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ethernet_output &rArr; pbuf_add_header &rArr; [local to pbuf_c]::pbuf_add_header_impl(pbuf*, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_output_to_arp_index(netif*, pbuf*, unsigned char)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_update_arp_entry(netif*, const ip4_addr*, eth_addr*, unsigned char)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[b0]"></a>ethernetif_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ethernetif_init &rArr; [local to ethernetif_cpp]::low_level_init(netif*) &rArr; ethernet_link_check_state &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; [local to dhcp_c]::dhcp_reboot(netif*) &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce12Netif_ConfigEv)
</UL>
<P><STRONG><a name="[108]"></a>ethernetif_input</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ethernetif_input &rArr; [local to ethernetif_cpp]::low_level_input(netif*) &rArr; pbuf_alloced_custom &rArr; [local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_input(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_RxCpltCallback
</UL>

<P><STRONG><a name="[155]"></a>ethernetif_set_mac_addr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ethernetif.o(i.ethernetif_set_mac_addr))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
</UL>

<P><STRONG><a name="[129]"></a>getTimerCCIrq</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, timer.o(i.getTimerCCIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getTimerCCIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[18f]"></a>getTimerClkSrc</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, timer.o(i.getTimerClkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>

<P><STRONG><a name="[128]"></a>getTimerUpIrq</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, timer.o(i.getTimerUpIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getTimerUpIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[18d]"></a>get_timer_obj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.get_timer_obj))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>

<P><STRONG><a name="[26a]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = icmp_dest_unreach &rArr; [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[26b]"></a>icmp_input</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[22f]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = icmp_time_exceeded &rArr; [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*)
</UL>

<P><STRONG><a name="[26c]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[1b8]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip4_addr.o(i.ip4_addr_isbroadcast_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_c]::ip4_input_accept(netif*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_update_arp_entry(netif*, const ip4_addr*, eth_addr*, unsigned char)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[26f]"></a>ip4_frag</STRONG> (Thumb, 460 bytes, Stack size 96 bytes, ip4_frag.o(i.ip4_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_frag_alloc_pbuf_custom_ref()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_frag_free_pbuf_custom_ref(pbuf_custom_ref*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>

<P><STRONG><a name="[261]"></a>ip4_input</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, ip4.o(i.ip4_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; [local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*) &rArr; tcp_alloc &rArr; [local to tcp_c]::tcp_kill_prio(unsigned char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_c]::ip4_input_accept(netif*)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[1f8]"></a>ip4_output_if</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, ip4.o(i.ip4_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment(tcp_seg*, tcp_pcb*, netif*)
</UL>

<P><STRONG><a name="[276]"></a>ip4_output_if_src</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ip4.o(i.ip4_output_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[271]"></a>ip4_reass</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, ip4_frag.o(i.ip4_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ip4_reass &rArr; [local to ip4_frag_c]::ip_reass_enqueue_new_datagram(ip_hdr*, int) &rArr; [local to ip4_frag_c]::ip_reass_remove_oldest_datagram(ip_hdr*, int) &rArr; [local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*) &rArr; icmp_time_exceeded &rArr; [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_chain_frag_into_datagram_and_validate(ip_reassdata*, pbuf*, int)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_remove_oldest_datagram(ip_hdr*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_enqueue_new_datagram(ip_hdr*, int)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_dequeue_datagram(ip_reassdata*, ip_reassdata*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[1f7]"></a>ip4_route</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ip4.o(i.ip4_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_route(const tcp_pcb*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[bf]"></a>ip_reass_tmr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ip4_frag.o(i.ip_reass_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ip_reass_tmr &rArr; [local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*) &rArr; icmp_time_exceeded &rArr; [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_offer(netif*, dhcp_msg*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_parse_reply(pbuf*, dhcp*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_ack(netif*, dhcp_msg*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header_common(unsigned, unsigned short, unsigned short, unsigned, unsigned short, unsigned short, unsigned char, unsigned short)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment(tcp_seg*, tcp_pcb*, netif*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_free_acked_segments(tcp_pcb*, tcp_seg*, const char*, tcp_seg*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
</UL>

<P><STRONG><a name="[1b2]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header_common(unsigned, unsigned short, unsigned short, unsigned, unsigned short, unsigned short, unsigned char, unsigned short)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment(tcp_seg*, tcp_pcb*, netif*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_free_acked_segments(tcp_pcb*, tcp_seg*, const char*, tcp_seg*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_chain_frag_into_datagram_and_validate(ip_reassdata*, pbuf*, int)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
</UL>

<P><STRONG><a name="[154]"></a>lwip_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout &rArr; [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
</UL>

<P><STRONG><a name="[a4]"></a>main</STRONG> (Thumb, 432 bytes, Stack size 128 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = main &rArr; EthernetClass::begin(IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress) &rArr; EthernetClass::begin(IPAddress, IPAddress, IPAddress, IPAddress) &rArr; stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::localIP()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::available()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::begin()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::connected()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::available()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::stop()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::read()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const Printable&)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::write(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::CPU_CACHE_Enable()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::MPU_Config()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClass::begin(IPAddress)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16d]"></a>mem_free</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::mem_link_valid(mem*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::plug_holes(mem*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::accept()
</UL>

<P><STRONG><a name="[277]"></a>mem_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::ptr_to_mem(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[167]"></a>mem_malloc</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::ptr_to_mem(unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::mem_to_ptr(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
</UL>

<P><STRONG><a name="[280]"></a>mem_trim</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mem_trim
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::ptr_to_mem(unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::mem_to_ptr(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[19d]"></a>memp_free</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to memp_c]::do_memp_free_pool(const memp_desc*, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_free_listen(tcp_pcb*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_frag_free_pbuf_custom_ref(pbuf_custom_ref*)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_dequeue_datagram(ip_reassdata*, ip_reassdata*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::begin()
</UL>

<P><STRONG><a name="[282]"></a>memp_free_pool</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, memp.o(i.memp_free_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_free_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to memp_c]::do_memp_free_pool(const memp_desc*, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_custom
</UL>

<P><STRONG><a name="[278]"></a>memp_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_init &rArr; memp_init_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[23d]"></a>memp_init_pool</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, memp.o(i.memp_init_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_init(netif*)
</UL>

<P><STRONG><a name="[220]"></a>memp_malloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to memp_c]::do_memp_malloc_pool(const memp_desc*)
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_enqueue_new_datagram(ip_hdr*, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_frag_alloc_pbuf_custom_ref()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[243]"></a>memp_malloc_pool</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memp.o(i.memp_malloc_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_malloc_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to memp_c]::do_memp_malloc_pool(const memp_desc*)
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_input(netif*)
</UL>

<P><STRONG><a name="[234]"></a>netif_add</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::Netif_Config()
</UL>

<P><STRONG><a name="[228]"></a>netif_get_by_index</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, netif.o(i.netif_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_route(const tcp_pcb*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[279]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1e7]"></a>netif_set_addr</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_set_netmask(netif*, const ip4_addr*, ip4_addr*)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_set_gw(netif*, const ip4_addr*, ip4_addr*)
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_bind(netif*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_nak(netif*)
</UL>

<P><STRONG><a name="[235]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::Netif_Config()
</UL>

<P><STRONG><a name="[264]"></a>netif_set_down</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; [local to etharp_c]::etharp_free_entry(int) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[236]"></a>netif_set_link_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_link_callback))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::Netif_Config()
</UL>

<P><STRONG><a name="[265]"></a>netif_set_link_down</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_set_link_down
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[269]"></a>netif_set_link_up</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, netif.o(i.netif_set_link_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; [local to dhcp_c]::dhcp_reboot(netif*) &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_issue_reports(netif*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[268]"></a>netif_set_up</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netif_set_up &rArr; [local to netif_c]::netif_issue_reports(netif*, unsigned char) &rArr; etharp_request &rArr; [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_issue_reports(netif*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
</UL>

<P><STRONG><a name="[221]"></a>pbuf_add_header</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_add_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_add_header &rArr; [local to pbuf_c]::pbuf_add_header_impl(pbuf*, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_add_header_impl(pbuf*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1b1]"></a>pbuf_alloc</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header_common(unsigned, unsigned short, unsigned short, unsigned, unsigned short, unsigned short, unsigned char, unsigned short)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_pbuf_prealloc(pbuf_layer, unsigned short, unsigned short, unsigned short*, const tcp_pcb*, unsigned char, unsigned char)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
</UL>

<P><STRONG><a name="[286]"></a>pbuf_alloc_reference</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc_reference))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_alloc_reference &rArr; [local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[244]"></a>pbuf_alloced_custom</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_alloced_custom &rArr; [local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_input(netif*)
</UL>

<P><STRONG><a name="[270]"></a>pbuf_cat</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[238]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::tcp_recv_callback(void*, tcp_pcb*, pbuf*, signed char)
</UL>

<P><STRONG><a name="[21c]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_free_acked_segments(tcp_pcb*, tcp_seg*, const char*, tcp_seg*)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*)
</UL>

<P><STRONG><a name="[25f]"></a>pbuf_clone</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pbuf_clone &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[26d]"></a>pbuf_copy</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clone
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[1ec]"></a>pbuf_copy_partial</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy_partial &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_parse_reply(pbuf*, dhcp*)
</UL>

<P><STRONG><a name="[15e]"></a>pbuf_free</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_update_arp_entry(netif*, const ip4_addr*, eth_addr*, unsigned char)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_free_entry(int)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ipfrag_free_pbuf_custom(pbuf*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_free_data(pbuf*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::tcp_recv_callback(void*, tcp_pcb*, pbuf*, signed char)
</UL>

<P><STRONG><a name="[b3]"></a>pbuf_free_custom</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethernetif.o(i.pbuf_free_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_free_custom &rArr; memp_free_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::SCB_InvalidateDCache_by_Addr(unsigned*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i._ZN36_INTERNAL_14_ethernetif_cpp_04a99f9b15low_level_inputEP5netif)
</UL>
<P><STRONG><a name="[15b]"></a>pbuf_get_at</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pbuf_get_at &rArr; pbuf_try_get_at &rArr; [local to pbuf_c]::pbuf_skip_const(const pbuf*, unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_data(pbuf_data*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[275]"></a>pbuf_header_force</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_header_force &rArr; [local to pbuf_c]::pbuf_header_impl(pbuf*, short, unsigned char) &rArr; [local to pbuf_c]::pbuf_add_header_impl(pbuf*, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_header_impl(pbuf*, short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1b4]"></a>pbuf_put_at</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_put_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_put_at &rArr; pbuf_skip &rArr; [local to pbuf_c]::pbuf_skip_const(const pbuf*, unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
</UL>

<P><STRONG><a name="[1ee]"></a>pbuf_realloc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
</UL>

<P><STRONG><a name="[15c]"></a>pbuf_ref</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_get_data(pbuf_data*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1fa]"></a>pbuf_remove_header</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_remove_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_remove_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_header_impl(pbuf*, short, unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
</UL>

<P><STRONG><a name="[289]"></a>pbuf_skip</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_skip &rArr; [local to pbuf_c]::pbuf_skip_const(const pbuf*, unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_skip_const(const pbuf*, unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
</UL>

<P><STRONG><a name="[1b3]"></a>pbuf_take</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_take &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
</UL>

<P><STRONG><a name="[1b5]"></a>pbuf_take_at</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_take_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
</UL>

<P><STRONG><a name="[288]"></a>pbuf_try_get_at</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_try_get_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_try_get_at &rArr; [local to pbuf_c]::pbuf_skip_const(const pbuf*, unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_skip_const(const pbuf*, unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>

<P><STRONG><a name="[177]"></a>pinMode</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, sys.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sys_c]::SPI_3_Init()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sys_c]::SPI_2_Init()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to sys_c]::SPI_1_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[272]"></a>raw_input</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = raw_input &rArr; ip4_addr_isbroadcast_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to raw_c]::raw_input_local_match(raw_pcb*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[202]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, raw.o(i.raw_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*)
</UL>

<P><STRONG><a name="[163]"></a>sys_check_timeouts</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, timeouts.o(i.sys_check_timeouts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_check_timeouts &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
</UL>

<P><STRONG><a name="[233]"></a>sys_now</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ethernetif.o(i.sys_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_check_timeouts
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to timeouts_c]::lwip_cyclic_timer(void*)
</UL>

<P><STRONG><a name="[232]"></a>sys_timeout</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timeouts.o(i.sys_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sys_timeout &rArr; [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to timeouts_c]::tcpip_tcp_timer(void*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>

<P><STRONG><a name="[27d]"></a>sys_timeouts_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timeouts.o(i.sys_timeouts_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout &rArr; [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1c0]"></a>tcp_abandon</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_kill_state(tcp_state)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
</UL>

<P><STRONG><a name="[1be]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_kill_timewait()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_accept_null(void*, tcp_pcb*, signed char)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_kill_prio(unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[170]"></a>tcp_accept</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::begin()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
</UL>

<P><STRONG><a name="[218]"></a>tcp_alloc</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_alloc &rArr; [local to tcp_c]::tcp_kill_prio(unsigned char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_handle_closepend()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_kill_timewait()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_kill_state(tcp_state)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_kill_prio(unsigned char)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
</UL>

<P><STRONG><a name="[168]"></a>tcp_arg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::begin()
</UL>

<P><STRONG><a name="[19c]"></a>tcp_bind</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_new_port()
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::begin()
</UL>

<P><STRONG><a name="[16e]"></a>tcp_close</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
</UL>

<P><STRONG><a name="[20c]"></a>tcp_eff_send_mss_netif</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp.o(i.tcp_eff_send_mss_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_eff_send_mss_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment(tcp_seg*, tcp_pcb*, netif*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[21a]"></a>tcp_enqueue_flags</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_enqueue_flags &rArr; [local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char) &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
</UL>

<P><STRONG><a name="[16a]"></a>tcp_err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
</UL>

<P><STRONG><a name="[28e]"></a>tcp_fasttmr</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown_fin(tcp_pcb*)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[1c9]"></a>tcp_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_free &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_input_delayed_close(tcp_pcb*)
</UL>

<P><STRONG><a name="[27b]"></a>tcp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp.o(i.tcp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[274]"></a>tcp_input</STRONG> (Thumb, 1278 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tcp_input &rArr; [local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*) &rArr; tcp_alloc &rArr; [local to tcp_c]::tcp_kill_prio(unsigned char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_input_delayed_close(tcp_pcb*)
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_timewait_input(tcp_pcb*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[290]"></a>tcp_keepalive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tcp_keepalive &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_fill_options(const tcp_pcb*, pbuf*, unsigned char, unsigned char)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header(tcp_pcb*, unsigned short, unsigned short, unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[19e]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::begin()
</UL>

<P><STRONG><a name="[292]"></a>tcp_listen_with_backlog_and_err</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, tcp.o(i.tcp_listen_with_backlog_and_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout &rArr; [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
</UL>

<P><STRONG><a name="[200]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp.o(i.tcp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*)
</UL>

<P><STRONG><a name="[19b]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; [local to tcp_c]::tcp_kill_prio(unsigned char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::begin()
</UL>

<P><STRONG><a name="[219]"></a>tcp_next_iss</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
</UL>

<P><STRONG><a name="[198]"></a>tcp_output</STRONG> (Thumb, 594 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_route(const tcp_pcb*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment(tcp_seg*, tcp_pcb*, netif*)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown_fin(tcp_pcb*)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_timewait_input(tcp_pcb*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1c7]"></a>tcp_pcb_purge</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[1ca]"></a>tcp_pcb_remove</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_input_delayed_close(tcp_pcb*)
</UL>

<P><STRONG><a name="[16f]"></a>tcp_poll</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.tcp_poll))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
</UL>

<P><STRONG><a name="[28f]"></a>tcp_process_refused_data</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[169]"></a>tcp_recv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
</UL>

<P><STRONG><a name="[bc]"></a>tcp_recv_null</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[237]"></a>tcp_recved</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32_eth_cpp]::tcp_recv_callback(void*, tcp_pcb*, pbuf*, signed char)
</UL>

<P><STRONG><a name="[210]"></a>tcp_rexmit</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment_busy(const tcp_seg*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[212]"></a>tcp_rexmit_fast</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
</UL>

<P><STRONG><a name="[20e]"></a>tcp_rexmit_rto</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[294]"></a>tcp_rexmit_rto_commit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_rto_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</UL>

<P><STRONG><a name="[293]"></a>tcp_rexmit_rto_prepare</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_rexmit_rto_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment_busy(const tcp_seg*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</UL>

<P><STRONG><a name="[1c6]"></a>tcp_rst</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tcp_rst &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header_common(unsigned, unsigned short, unsigned short, unsigned, unsigned short, unsigned short, unsigned char, unsigned short)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_fill_options(const tcp_pcb*, pbuf*, unsigned char, unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_timewait_input(tcp_pcb*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[20d]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_free_acked_segments(tcp_pcb*, tcp_seg*, const char*, tcp_seg*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[28c]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[214]"></a>tcp_send_empty_ack</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_fill_options(const tcp_pcb*, pbuf*, unsigned char, unsigned char)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header(tcp_pcb*, unsigned short, unsigned short, unsigned)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
</UL>

<P><STRONG><a name="[1cd]"></a>tcp_send_fin</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; [local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char) &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown_fin(tcp_pcb*)
</UL>

<P><STRONG><a name="[16b]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
</UL>

<P><STRONG><a name="[166]"></a>tcp_setprio</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp.o(i.tcp_setprio))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_callback(void*, tcp_pcb*, signed char)
</UL>

<P><STRONG><a name="[295]"></a>tcp_slowtmr</STRONG> (Thumb, 914 bytes, Stack size 56 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto_commit &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_commit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[297]"></a>tcp_split_unsent_seg</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_split_unsent_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_split_unsent_seg &rArr; [local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char) &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[211]"></a>tcp_timer_needed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timeouts.o(i.tcp_timer_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout &rArr; [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[be]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to timeouts_c]::tcpip_tcp_timer(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timeouts.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcp_in.o(i.tcp_trigger_input_pcb_close))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
</UL>

<P><STRONG><a name="[215]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
</UL>

<P><STRONG><a name="[197]"></a>tcp_write</STRONG> (Thumb, 1050 bytes, Stack size 120 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tcp_write &rArr; [local to tcp_out_c]::tcp_pbuf_prealloc(pbuf_layer, unsigned short, unsigned short, unsigned short*, const tcp_pcb*, unsigned char, unsigned char) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_pbuf_prealloc(pbuf_layer, unsigned short, unsigned short, unsigned short*, const tcp_pcb*, unsigned char, unsigned char)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_write_checks(tcp_pcb*, unsigned short)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetClient::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[296]"></a>tcp_zero_window_probe</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_zero_window_probe &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_fill_options(const tcp_pcb*, pbuf*, unsigned char, unsigned char)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header(tcp_pcb*, unsigned short, unsigned short, unsigned)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[1f2]"></a>udp_bind</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; [local to udp_c]::udp_new_port()
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to udp_c]::udp_new_port()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_inc_pcb_refcount()
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>

<P><STRONG><a name="[1f3]"></a>udp_connect</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; [local to udp_c]::udp_new_port()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_inc_pcb_refcount()
</UL>

<P><STRONG><a name="[27a]"></a>udp_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp.o(i.udp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[273]"></a>udp_input</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to udp_c]::udp_input_local_match(udp_pcb*, netif*, unsigned char)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[201]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, udp.o(i.udp_netif_ip_addr_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*)
</UL>

<P><STRONG><a name="[1f1]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = udp_new &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_inc_pcb_refcount()
</UL>

<P><STRONG><a name="[1f4]"></a>udp_recv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_inc_pcb_refcount()
</UL>

<P><STRONG><a name="[1a9]"></a>udp_remove</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_remove &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_dec_pcb_refcount()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_call_found(unsigned char, ip4_addr*)
</UL>

<P><STRONG><a name="[1b6]"></a>udp_sendto</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
</UL>

<P><STRONG><a name="[1d9]"></a>udp_sendto_if</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[1de]"></a>udp_sendto_if_src</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, udp.o(i.udp_sendto_if_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[102]"></a>[local to stm32h7xx_hal_eth_c]::ETH_MACDMAConfig(ETH_HandleTypeDef*)</STRONG> (Thumb, 262 bytes, Stack size 144 bytes, stm32h7xx_hal_eth.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_eth_c_dbbceda716ETH_MACDMAConfigEP17ETH_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = [local to stm32h7xx_hal_eth_c]::ETH_MACDMAConfig(ETH_HandleTypeDef*) &rArr; [local to stm32h7xx_hal_eth_c]::ETH_SetMACConfig(ETH_HandleTypeDef*, ETH_MACConfigTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_SetMACConfig(ETH_HandleTypeDef*, ETH_MACConfigTypeDef*)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_SetDMAConfig(ETH_HandleTypeDef*, ETH_DMAConfigTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[245]"></a>[local to stm32h7xx_hal_eth_c]::ETH_SetDMAConfig(ETH_HandleTypeDef*, ETH_DMAConfigTypeDef*)</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_eth_c_dbbceda716ETH_SetDMAConfigEP17ETH_HandleTypeDefP20ETH_DMAConfigTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32h7xx_hal_eth_c]::ETH_SetDMAConfig(ETH_HandleTypeDef*, ETH_DMAConfigTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_MACDMAConfig(ETH_HandleTypeDef*)
</UL>

<P><STRONG><a name="[10a]"></a>[local to stm32h7xx_hal_eth_c]::ETH_SetMACConfig(ETH_HandleTypeDef*, ETH_MACConfigTypeDef*)</STRONG> (Thumb, 394 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_eth_c_dbbceda716ETH_SetMACConfigEP17ETH_HandleTypeDefP20ETH_MACConfigTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32h7xx_hal_eth_c]::ETH_SetMACConfig(ETH_HandleTypeDef*, ETH_MACConfigTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_SetMACConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32h7xx_hal_eth_c]::ETH_MACDMAConfig(ETH_HandleTypeDef*)
</UL>

<P><STRONG><a name="[104]"></a>[local to stm32h7xx_hal_eth_c]::ETH_DMARxDescListInit(ETH_HandleTypeDef*)</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_eth_c_dbbceda721ETH_DMARxDescListInitEP17ETH_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32h7xx_hal_eth_c]::ETH_DMARxDescListInit(ETH_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[103]"></a>[local to stm32h7xx_hal_eth_c]::ETH_DMATxDescListInit(ETH_HandleTypeDef*)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32h7xx_hal_eth.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_eth_c_dbbceda721ETH_DMATxDescListInitEP17ETH_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32h7xx_hal_eth_c]::ETH_DMATxDescListInit(ETH_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[100]"></a>[local to stm32h7xx_hal_eth_c]::ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef*)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32h7xx_hal_eth.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_eth_c_dbbceda722ETH_MAC_MDIO_ClkConfigEP17ETH_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to stm32h7xx_hal_eth_c]::ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef*) &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
</UL>

<P><STRONG><a name="[10c]"></a>[local to stm32h7xx_hal_eth_c]::ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef*, ETH_TxPacketConfig*, unsigned)</STRONG> (Thumb, 838 bytes, Stack size 32 bytes, stm32h7xx_hal_eth.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_eth_c_dbbceda726ETH_Prepare_Tx_DescriptorsEP17ETH_HandleTypeDefP18ETH_TxPacketConfigj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to stm32h7xx_hal_eth_c]::ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef*, ETH_TxPacketConfig*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
</UL>

<P><STRONG><a name="[1a8]"></a>[local to dns_c]::dns_call_found(unsigned char, ip4_addr*)</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, dns.o(i._ZN26_INTERNAL_5_dns_c_cd221b1914dns_call_foundEhP8ip4_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to dns_c]::dns_call_found(unsigned char, ip4_addr*) &rArr; udp_remove &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_check_entry(unsigned char)
</UL>

<P><STRONG><a name="[1aa]"></a>[local to dns_c]::dns_check_entry(unsigned char)</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, dns.o(i._ZN26_INTERNAL_5_dns_c_cd221b1915dns_check_entryEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = [local to dns_c]::dns_check_entry(unsigned char) &rArr; [local to dns_c]::dns_send(unsigned char) &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_send(unsigned char)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_backupserver_available(dns_table_entry*)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_create_txid()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_call_found(unsigned char, ip4_addr*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_check_entries()
</UL>

<P><STRONG><a name="[1ab]"></a>[local to dns_c]::dns_create_txid()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dns.o(i._ZN26_INTERNAL_5_dns_c_cd221b1915dns_create_txidEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to dns_c]::dns_create_txid()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_check_entry(unsigned char)
</UL>

<P><STRONG><a name="[1af]"></a>[local to dns_c]::dns_check_entries()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dns.o(i._ZN26_INTERNAL_5_dns_c_cd221b1917dns_check_entriesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = [local to dns_c]::dns_check_entries() &rArr; [local to dns_c]::dns_check_entry(unsigned char) &rArr; [local to dns_c]::dns_send(unsigned char) &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_check_entry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[1ad]"></a>[local to dns_c]::dns_backupserver_available(dns_table_entry*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dns.o(i._ZN26_INTERNAL_5_dns_c_cd221b1926dns_backupserver_availableEP15dns_table_entry))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_check_entry(unsigned char)
</UL>

<P><STRONG><a name="[1ac]"></a>[local to dns_c]::dns_send(unsigned char)</STRONG> (Thumb, 326 bytes, Stack size 72 bytes, dns.o(i._ZN26_INTERNAL_5_dns_c_cd221b198dns_sendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = [local to dns_c]::dns_send(unsigned char) &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_call_found(unsigned char, ip4_addr*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dns_c]::dns_check_entry(unsigned char)
</UL>

<P><STRONG><a name="[1bb]"></a>[local to mem_c]::mem_to_ptr(void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mem.o(i._ZN26_INTERNAL_5_mem_c_mem_init10mem_to_ptrEPv))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::mem_link_valid(mem*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::plug_holes(mem*)
</UL>

<P><STRONG><a name="[1b9]"></a>[local to mem_c]::plug_holes(mem*)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mem.o(i._ZN26_INTERNAL_5_mem_c_mem_init10plug_holesEP3mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to mem_c]::plug_holes(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::ptr_to_mem(unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::mem_to_ptr(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[1ba]"></a>[local to mem_c]::ptr_to_mem(unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mem.o(i._ZN26_INTERNAL_5_mem_c_mem_init10ptr_to_memEt))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::mem_link_valid(mem*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::plug_holes(mem*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[1bc]"></a>[local to mem_c]::mem_link_valid(mem*)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mem.o(i._ZN26_INTERNAL_5_mem_c_mem_init14mem_link_validEP3mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::ptr_to_mem(unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to mem_c]::mem_to_ptr(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[281]"></a>[local to memp_c]::do_memp_free_pool(const memp_desc*, void*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memp.o(i._ZN27_INTERNAL_6_memp_c_5261739417do_memp_free_poolEPK9memp_descPv))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[283]"></a>[local to memp_c]::do_memp_malloc_pool(const memp_desc*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, memp.o(i._ZN27_INTERNAL_6_memp_c_5261739419do_memp_malloc_poolEPK9memp_desc))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[285]"></a>[local to netif_c]::netif_do_set_gw(netif*, const ip4_addr*, ip4_addr*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, netif.o(i._ZN28_INTERNAL_7_netif_c_8fba813715netif_do_set_gwEP5netifPK8ip4_addrPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to netif_c]::netif_do_set_gw(netif*, const ip4_addr*, ip4_addr*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[1fc]"></a>[local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, netif.o(i._ZN28_INTERNAL_7_netif_c_8fba813719netif_do_set_ipaddrEP5netifPK8ip4_addrPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_issue_reports(netif*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[1fe]"></a>[local to netif_c]::netif_issue_reports(netif*, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, netif.o(i._ZN28_INTERNAL_7_netif_c_8fba813719netif_issue_reportsEP5netifh))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = [local to netif_c]::netif_issue_reports(netif*, unsigned char) &rArr; etharp_request &rArr; [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*)
</UL>

<P><STRONG><a name="[284]"></a>[local to netif_c]::netif_do_set_netmask(netif*, const ip4_addr*, ip4_addr*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, netif.o(i._ZN28_INTERNAL_7_netif_c_8fba813720netif_do_set_netmaskEP5netifPK8ip4_addrPS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to netif_c]::netif_do_set_netmask(netif*, const ip4_addr*, ip4_addr*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[bb]"></a>[local to netif_c]::netif_null_output_ip4(netif*, pbuf*, const ip4_addr*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i._ZN28_INTERNAL_7_netif_c_8fba813721netif_null_output_ip4EP5netifP4pbufPK8ip4_addr))
<BR>[Address Reference Count : 1]<UL><LI> netif.o(i.netif_add)
</UL>
<P><STRONG><a name="[1fd]"></a>[local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, netif.o(i._ZN28_INTERNAL_7_netif_c_8fba813724netif_do_ip_addr_changedEPK8ip4_addrS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*)
</UL>

<P><STRONG><a name="[28a]"></a>[local to pbuf_c]::pbuf_skip_const(const pbuf*, unsigned short, unsigned short*)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, pbuf.o(i._ZN27_INTERNAL_6_pbuf_c_34e97b4d15pbuf_skip_constEPK4pbuftPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to pbuf_c]::pbuf_skip_const(const pbuf*, unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>

<P><STRONG><a name="[1f9]"></a>[local to pbuf_c]::pbuf_header_impl(pbuf*, short, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pbuf.o(i._ZN27_INTERNAL_6_pbuf_c_34e97b4d16pbuf_header_implEP4pbufsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to pbuf_c]::pbuf_header_impl(pbuf*, short, unsigned char) &rArr; [local to pbuf_c]::pbuf_add_header_impl(pbuf*, unsigned, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_add_header_impl(pbuf*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
</UL>

<P><STRONG><a name="[1fb]"></a>[local to pbuf_c]::pbuf_add_header_impl(pbuf*, unsigned, unsigned char)</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, pbuf.o(i._ZN27_INTERNAL_6_pbuf_c_34e97b4d20pbuf_add_header_implEP4pbufjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to pbuf_c]::pbuf_add_header_impl(pbuf*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to pbuf_c]::pbuf_header_impl(pbuf*, short, unsigned char)
</UL>

<P><STRONG><a name="[287]"></a>[local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pbuf.o(i._ZN27_INTERNAL_6_pbuf_c_34e97b4d22pbuf_init_alloced_pbufEP4pbufPvtt9pbuf_typeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc_reference
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[28b]"></a>[local to raw_c]::raw_input_local_match(raw_pcb*, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, raw.o(i._ZN26_INTERNAL_5_raw_c_ee00ce9521raw_input_local_matchEP7raw_pcbh))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[28d]"></a>[local to tcp_c]::tcp_new_port()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8512tcp_new_portEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to tcp_c]::tcp_new_port()
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[1bd]"></a>[local to tcp_c]::tcp_kill_prio(unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8513tcp_kill_prioEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = [local to tcp_c]::tcp_kill_prio(unsigned char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1bf]"></a>[local to tcp_c]::tcp_kill_state(tcp_state)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8514tcp_kill_stateE9tcp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = [local to tcp_c]::tcp_kill_state(tcp_state) &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[bd]"></a>[local to tcp_c]::tcp_accept_null(void*, tcp_pcb*, signed char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8515tcp_accept_nullEPvP7tcp_pcba))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = [local to tcp_c]::tcp_accept_null(void*, tcp_pcb*, signed char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog_and_err)
</UL>
<P><STRONG><a name="[1c1]"></a>[local to tcp_c]::tcp_free_listen(tcp_pcb*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8515tcp_free_listenEP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to tcp_c]::tcp_free_listen(tcp_pcb*) &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
</UL>

<P><STRONG><a name="[1c2]"></a>[local to tcp_c]::tcp_kill_timewait()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8517tcp_kill_timewaitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = [local to tcp_c]::tcp_kill_timewait() &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1c3]"></a>[local to tcp_c]::tcp_listen_closed(tcp_pcb*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8517tcp_listen_closedEP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to tcp_c]::tcp_listen_closed(tcp_pcb*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_remove_listener(tcp_pcb*, tcp_pcb_listen*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
</UL>

<P><STRONG><a name="[1c5]"></a>[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8518tcp_close_shutdownEP7tcp_pcbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown_fin(tcp_pcb*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_listen_closed(tcp_pcb*)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_free_listen(tcp_pcb*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[1c4]"></a>[local to tcp_c]::tcp_remove_listener(tcp_pcb*, tcp_pcb_listen*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8519tcp_remove_listenerEP7tcp_pcbP14tcp_pcb_listen))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_listen_closed(tcp_pcb*)
</UL>

<P><STRONG><a name="[1cc]"></a>[local to tcp_c]::tcp_handle_closepend()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8520tcp_handle_closependEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = [local to tcp_c]::tcp_handle_closepend() &rArr; [local to tcp_c]::tcp_close_shutdown_fin(tcp_pcb*) &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown_fin(tcp_pcb*)
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1cb]"></a>[local to tcp_c]::tcp_close_shutdown_fin(tcp_pcb*)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8522tcp_close_shutdown_finEP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = [local to tcp_c]::tcp_close_shutdown_fin(tcp_pcb*) &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_handle_closepend()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char)
</UL>

<P><STRONG><a name="[1ce]"></a>[local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tcp.o(i._ZN26_INTERNAL_5_tcp_c_1dfa8a8533tcp_netif_ip_addr_changed_pcblistEPK8ip4_addrP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[20a]"></a>[local to tcp_in_c]::tcp_process(tcp_pcb*)</STRONG> (Thumb, 1444 bytes, Stack size 40 bytes, tcp_in.o(i._ZN29_INTERNAL_8_tcp_in_c_1a988eec11tcp_processEP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = [local to tcp_in_c]::tcp_process(tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_parseopt(tcp_pcb*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[20f]"></a>[local to tcp_in_c]::tcp_receive(tcp_pcb*)</STRONG> (Thumb, 1456 bytes, Stack size 40 bytes, tcp_in.o(i._ZN29_INTERNAL_8_tcp_in_c_1a988eec11tcp_receiveEP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = [local to tcp_in_c]::tcp_receive(tcp_pcb*) &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_remove_header
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_free_acked_segments(tcp_pcb*, tcp_seg*, const char*, tcp_seg*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[20b]"></a>[local to tcp_in_c]::tcp_parseopt(tcp_pcb*)</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tcp_in.o(i._ZN29_INTERNAL_8_tcp_in_c_1a988eec12tcp_parseoptEP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to tcp_in_c]::tcp_parseopt(tcp_pcb*)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_get_next_optbyte()
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_process(tcp_pcb*)
</UL>

<P><STRONG><a name="[217]"></a>[local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*)</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, tcp_in.o(i._ZN29_INTERNAL_8_tcp_in_c_1a988eec16tcp_listen_inputEP14tcp_pcb_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = [local to tcp_in_c]::tcp_listen_input(tcp_pcb_listen*) &rArr; tcp_alloc &rArr; [local to tcp_c]::tcp_kill_prio(unsigned char) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_parseopt(tcp_pcb*)
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[21b]"></a>[local to tcp_in_c]::tcp_timewait_input(tcp_pcb*)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tcp_in.o(i._ZN29_INTERNAL_8_tcp_in_c_1a988eec18tcp_timewait_inputEP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = [local to tcp_in_c]::tcp_timewait_input(tcp_pcb*) &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[216]"></a>[local to tcp_in_c]::tcp_get_next_optbyte()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tcp_in.o(i._ZN29_INTERNAL_8_tcp_in_c_1a988eec20tcp_get_next_optbyteEv))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_parseopt(tcp_pcb*)
</UL>

<P><STRONG><a name="[213]"></a>[local to tcp_in_c]::tcp_free_acked_segments(tcp_pcb*, tcp_seg*, const char*, tcp_seg*)</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tcp_in.o(i._ZN29_INTERNAL_8_tcp_in_c_1a988eec23tcp_free_acked_segmentsEP7tcp_pcbP7tcp_segPKcS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to tcp_in_c]::tcp_free_acked_segments(tcp_pcb*, tcp_seg*, const char*, tcp_seg*) &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_in_c]::tcp_receive(tcp_pcb*)
</UL>

<P><STRONG><a name="[21d]"></a>[local to tcp_in_c]::tcp_input_delayed_close(tcp_pcb*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tcp_in.o(i._ZN29_INTERNAL_8_tcp_in_c_1a988eec23tcp_input_delayed_closeEP7tcp_pcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = [local to tcp_in_c]::tcp_input_delayed_close(tcp_pcb*) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[298]"></a>[local to tcp_out_c]::tcp_write_checks(tcp_pcb*, unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66416tcp_write_checksEP7tcp_pcbt))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[21e]"></a>[local to tcp_out_c]::tcp_pbuf_prealloc(pbuf_layer, unsigned short, unsigned short, unsigned short*, const tcp_pcb*, unsigned char, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66417tcp_pbuf_preallocE10pbuf_layerttPtPK7tcp_pcbhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = [local to tcp_out_c]::tcp_pbuf_prealloc(pbuf_layer, unsigned short, unsigned short, unsigned short*, const tcp_pcb*, unsigned char, unsigned char) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[21f]"></a>[local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66418tcp_create_segmentEPK7tcp_pcbP4pbufhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = [local to tcp_out_c]::tcp_create_segment(const tcp_pcb*, pbuf*, unsigned char, unsigned, unsigned char) &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_add_header
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_split_unsent_seg
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[222]"></a>[local to tcp_out_c]::tcp_output_segment(tcp_seg*, tcp_pcb*, netif*)</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66418tcp_output_segmentEP7tcp_segP7tcp_pcbP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = [local to tcp_out_c]::tcp_output_segment(tcp_seg*, tcp_pcb*, netif*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_netif
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment_busy(const tcp_seg*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[224]"></a>[local to tcp_out_c]::tcp_output_alloc_header(tcp_pcb*, unsigned short, unsigned short, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66423tcp_output_alloc_headerEP7tcp_pcbttj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [local to tcp_out_c]::tcp_output_alloc_header(tcp_pcb*, unsigned short, unsigned short, unsigned) &rArr; [local to tcp_out_c]::tcp_output_alloc_header_common(unsigned, unsigned short, unsigned short, unsigned, unsigned short, unsigned short, unsigned char, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header_common(unsigned, unsigned short, unsigned short, unsigned, unsigned short, unsigned short, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[291]"></a>[local to tcp_out_c]::tcp_output_fill_options(const tcp_pcb*, pbuf*, unsigned char, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 20 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66423tcp_output_fill_optionsEPK7tcp_pcbP4pbufhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to tcp_out_c]::tcp_output_fill_options(const tcp_pcb*, pbuf*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[223]"></a>[local to tcp_out_c]::tcp_output_segment_busy(const tcp_seg*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66423tcp_output_segment_busyEPK7tcp_seg))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto_prepare
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_segment(tcp_seg*, tcp_pcb*, netif*)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>

<P><STRONG><a name="[226]"></a>[local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*)</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66426tcp_output_control_segmentEPK7tcp_pcbP4pbufPK8ip4_addrS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_route(const tcp_pcb*, const ip4_addr*, const ip4_addr*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[225]"></a>[local to tcp_out_c]::tcp_output_alloc_header_common(unsigned, unsigned short, unsigned short, unsigned, unsigned short, unsigned short, unsigned char, unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc66430tcp_output_alloc_header_commonEjttjttht))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to tcp_out_c]::tcp_output_alloc_header_common(unsigned, unsigned short, unsigned short, unsigned, unsigned short, unsigned short, unsigned char, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_alloc_header(tcp_pcb*, unsigned short, unsigned short, unsigned)
</UL>

<P><STRONG><a name="[227]"></a>[local to tcp_out_c]::tcp_route(const tcp_pcb*, const ip4_addr*, const ip4_addr*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp_out.o(i._ZN30_INTERNAL_9_tcp_out_c_bfdbc6649tcp_routeEPK7tcp_pcbPK8ip4_addrS5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to tcp_out_c]::tcp_route(const tcp_pcb*, const ip4_addr*, const ip4_addr*) &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*)
</UL>

<P><STRONG><a name="[231]"></a>[local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7615sys_timeout_absEjPFYvPvES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to timeouts_c]::lwip_cyclic_timer(void*)
</UL>

<P><STRONG><a name="[ad]"></a>[local to timeouts_c]::tcpip_tcp_timer(void*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7615tcpip_tcp_timerEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = [local to timeouts_c]::tcpip_tcp_timer(void*) &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i.tcp_timer_needed)
<LI> timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7615tcpip_tcp_timerEPv)
</UL>
<P><STRONG><a name="[ae]"></a>[local to timeouts_c]::lwip_cyclic_timer(void*)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7617lwip_cyclic_timerEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to timeouts_c]::lwip_cyclic_timer(void*) &rArr; [local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*) &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to timeouts_c]::sys_timeout_abs(unsigned, void(*)(void*), void*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeouts.o(i._ZN32_INTERNAL_10_timeouts_c_6f3cbd7617lwip_cyclic_timerEPv)
<LI> timeouts.o(i.sys_timeouts_init)
</UL>
<P><STRONG><a name="[299]"></a>[local to udp_c]::udp_new_port()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i._ZN26_INTERNAL_5_udp_c_udp_init12udp_new_portEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to udp_c]::udp_new_port()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[29a]"></a>[local to udp_c]::udp_input_local_match(udp_pcb*, netif*, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, udp.o(i._ZN26_INTERNAL_5_udp_c_udp_init21udp_input_local_matchEP7udp_pcbP5netifh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to udp_c]::udp_input_local_match(udp_pcb*, netif*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1cf]"></a>[local to dhcp_c]::dhcp_check(netif*)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f10dhcp_checkEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = [local to dhcp_c]::dhcp_check(netif*) &rArr; etharp_query &rArr; etharp_request &rArr; [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_timeout(netif*)
</UL>

<P><STRONG><a name="[1d4]"></a>[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f11dhcp_optionEtPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
</UL>

<P><STRONG><a name="[1d2]"></a>[local to dhcp_c]::dhcp_rebind(netif*)</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f11dhcp_rebindEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = [local to dhcp_c]::dhcp_rebind(netif*) &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_short(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_t2_timeout(netif*)
</UL>

<P><STRONG><a name="[1da]"></a>[local to dhcp_c]::dhcp_reboot(netif*)</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f11dhcp_rebootEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = [local to dhcp_c]::dhcp_reboot(netif*) &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_short(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_long(unsigned short, unsigned char*, unsigned)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_timeout(netif*)
</UL>

<P><STRONG><a name="[1dd]"></a>[local to dhcp_c]::dhcp_select(netif*)</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f11dhcp_selectEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = [local to dhcp_c]::dhcp_select(netif*) &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_short(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_long(unsigned short, unsigned char*, unsigned)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_offer(netif*, dhcp_msg*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_timeout(netif*)
</UL>

<P><STRONG><a name="[1df]"></a>[local to dhcp_c]::dhcp_decline(netif*)</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f12dhcp_declineEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = [local to dhcp_c]::dhcp_decline(netif*) &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_long(unsigned short, unsigned char*, unsigned)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[1e0]"></a>[local to dhcp_c]::dhcp_timeout(netif*)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f12dhcp_timeoutEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = [local to dhcp_c]::dhcp_timeout(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_bind(netif*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_check(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[1e1]"></a>[local to dhcp_c]::dhcp_discover(netif*)</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f13dhcp_discoverEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = [local to dhcp_c]::dhcp_discover(netif*) &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_short(unsigned short, unsigned char*, unsigned short)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_nak(netif*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_timeout(netif*)
</UL>

<P><STRONG><a name="[1d0]"></a>[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f14dhcp_set_stateEP4dhcph))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_bind(netif*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_nak(netif*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_check(netif*)
</UL>

<P><STRONG><a name="[1d3]"></a>[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f15dhcp_create_msgEP5netifP4dhcphPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
</UL>

<P><STRONG><a name="[1e4]"></a>[local to dhcp_c]::dhcp_handle_ack(netif*, dhcp_msg*)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f15dhcp_handle_ackEP5netifP8dhcp_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to dhcp_c]::dhcp_handle_ack(netif*, dhcp_msg*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)
</UL>

<P><STRONG><a name="[1e6]"></a>[local to dhcp_c]::dhcp_handle_nak(netif*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f15dhcp_handle_nakEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = [local to dhcp_c]::dhcp_handle_nak(netif*) &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)
</UL>

<P><STRONG><a name="[1e8]"></a>[local to dhcp_c]::dhcp_t1_timeout(netif*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f15dhcp_t1_timeoutEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = [local to dhcp_c]::dhcp_t1_timeout(netif*) &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1ea]"></a>[local to dhcp_c]::dhcp_t2_timeout(netif*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f15dhcp_t2_timeoutEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = [local to dhcp_c]::dhcp_t2_timeout(netif*) &rArr; [local to dhcp_c]::dhcp_rebind(netif*) &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[1d6]"></a>[local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f16dhcp_option_byteEtPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_create_msg(netif*, dhcp*, unsigned char, unsigned short*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
</UL>

<P><STRONG><a name="[1dc]"></a>[local to dhcp_c]::dhcp_option_long(unsigned short, unsigned char*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f16dhcp_option_longEtPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to dhcp_c]::dhcp_option_long(unsigned short, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
</UL>

<P><STRONG><a name="[1eb]"></a>[local to dhcp_c]::dhcp_parse_reply(pbuf*, dhcp*)</STRONG> (Thumb, 862 bytes, Stack size 80 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f16dhcp_parse_replyEP4pbufP4dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [local to dhcp_c]::dhcp_parse_reply(pbuf*, dhcp*) &rArr; pbuf_copy_partial &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)
</UL>

<P><STRONG><a name="[1ed]"></a>[local to dhcp_c]::dhcp_handle_offer(netif*, dhcp_msg*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f17dhcp_handle_offerEP5netifP8dhcp_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = [local to dhcp_c]::dhcp_handle_offer(netif*, dhcp_msg*) &rArr; [local to dhcp_c]::dhcp_select(netif*) &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)
</UL>

<P><STRONG><a name="[1d5]"></a>[local to dhcp_c]::dhcp_option_short(unsigned short, unsigned char*, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f17dhcp_option_shortEtPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to dhcp_c]::dhcp_option_short(unsigned short, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
</UL>

<P><STRONG><a name="[1d8]"></a>[local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f19dhcp_option_trailerEtPhP4pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to dhcp_c]::dhcp_option_trailer(unsigned short, unsigned char*, pbuf*) &rArr; pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_discover(netif*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_decline(netif*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
</UL>

<P><STRONG><a name="[1d7]"></a>[local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f20dhcp_option_hostnameEtPhP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = [local to dhcp_c]::dhcp_option_hostname(unsigned short, unsigned char*, netif*) &rArr; [local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option_byte(unsigned short, unsigned char*, unsigned char)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_option(unsigned short, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_select(netif*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_reboot(netif*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_rebind(netif*)
</UL>

<P><STRONG><a name="[1ef]"></a>[local to dhcp_c]::dhcp_dec_pcb_refcount()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f21dhcp_dec_pcb_refcountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to dhcp_c]::dhcp_dec_pcb_refcount() &rArr; udp_remove &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release_and_stop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
</UL>

<P><STRONG><a name="[1f0]"></a>[local to dhcp_c]::dhcp_inc_pcb_refcount()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f21dhcp_inc_pcb_refcountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to dhcp_c]::dhcp_inc_pcb_refcount() &rArr; udp_connect &rArr; udp_bind &rArr; [local to udp_c]::udp_new_port()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
</UL>

<P><STRONG><a name="[1e3]"></a>[local to dhcp_c]::dhcp_bind(netif*)</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f9dhcp_bindEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = [local to dhcp_c]::dhcp_bind(netif*) &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_set_state(dhcp*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_timeout(netif*)
</UL>

<P><STRONG><a name="[ac]"></a>[local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short)</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f9dhcp_recvEPvP7udp_pcbP4pbufPK8ip4_addrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = [local to dhcp_c]::dhcp_recv(void*, udp_pcb*, pbuf*, const ip4_addr*, unsigned short) &rArr; [local to dhcp_c]::dhcp_bind(netif*) &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_bind(netif*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_offer(netif*, dhcp_msg*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_parse_reply(pbuf*, dhcp*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_nak(netif*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_handle_ack(netif*, dhcp_msg*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to dhcp_c]::dhcp_check(netif*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i._ZN27_INTERNAL_6_dhcp_c_7036610f21dhcp_inc_pcb_refcountEv)
</UL>
<P><STRONG><a name="[203]"></a>[local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, etharp.o(i._ZN29_INTERNAL_8_etharp_c_46325f4310etharp_rawEP5netifPK8eth_addrS4_S4_PK8ip4_addrS4_S7_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*)
</UL>

<P><STRONG><a name="[205]"></a>[local to etharp_c]::etharp_find_entry(const ip4_addr*, unsigned char, netif*)</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, etharp.o(i._ZN29_INTERNAL_8_etharp_c_46325f4317etharp_find_entryEPK8ip4_addrhP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = [local to etharp_c]::etharp_find_entry(const ip4_addr*, unsigned char, netif*) &rArr; [local to etharp_c]::etharp_free_entry(int) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_free_entry(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_update_arp_entry(netif*, const ip4_addr*, eth_addr*, unsigned char)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[206]"></a>[local to etharp_c]::etharp_free_entry(int)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i._ZN29_INTERNAL_8_etharp_c_46325f4317etharp_free_entryEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = [local to etharp_c]::etharp_free_entry(int) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_find_entry(const ip4_addr*, unsigned char, netif*)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[207]"></a>[local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, etharp.o(i._ZN29_INTERNAL_8_etharp_c_46325f4318etharp_request_dstEP5netifPK8ip4_addrPK8eth_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_output_to_arp_index(netif*, pbuf*, unsigned char)
</UL>

<P><STRONG><a name="[208]"></a>[local to etharp_c]::etharp_update_arp_entry(netif*, const ip4_addr*, eth_addr*, unsigned char)</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, etharp.o(i._ZN29_INTERNAL_8_etharp_c_46325f4323etharp_update_arp_entryEP5netifPK8ip4_addrP8eth_addrh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to etharp_c]::etharp_update_arp_entry(netif*, const ip4_addr*, eth_addr*, unsigned char) &rArr; [local to etharp_c]::etharp_find_entry(const ip4_addr*, unsigned char, netif*) &rArr; [local to etharp_c]::etharp_free_entry(int) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_find_entry(const ip4_addr*, unsigned char, netif*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[209]"></a>[local to etharp_c]::etharp_output_to_arp_index(netif*, pbuf*, unsigned char)</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, etharp.o(i._ZN29_INTERNAL_8_etharp_c_46325f4326etharp_output_to_arp_indexEP5netifP4pbufh))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = [local to etharp_c]::etharp_output_to_arp_index(netif*, pbuf*, unsigned char) &rArr; etharp_request &rArr; [local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*) &rArr; [local to etharp_c]::etharp_raw(netif*, const eth_addr*, const eth_addr*, const eth_addr*, const ip4_addr*, const eth_addr*, const ip4_addr*, unsigned short) &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to etharp_c]::etharp_request_dst(netif*, const ip4_addr*, const eth_addr*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1f5]"></a>[local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, icmp.o(i._ZN27_INTERNAL_6_icmp_c_efc2e00418icmp_send_responseEP4pbufhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[1b7]"></a>[local to ip4_c]::ip4_input_accept(netif*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ip4.o(i._ZN26_INTERNAL_5_ip4_c_df8b5ec616ip4_input_acceptEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to ip4_c]::ip4_input_accept(netif*) &rArr; ip4_addr_isbroadcast_u32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[ba]"></a>[local to ip4_frag_c]::ipfrag_free_pbuf_custom(pbuf*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef23ipfrag_free_pbuf_customEP4pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = [local to ip4_frag_c]::ipfrag_free_pbuf_custom(pbuf*) &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_frag_free_pbuf_custom_ref(pbuf_custom_ref*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip4_frag.o(i.ip4_frag)
</UL>
<P><STRONG><a name="[22a]"></a>[local to ip4_frag_c]::ip_reass_dequeue_datagram(ip_reassdata*, ip_reassdata*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef25ip_reass_dequeue_datagramEP12ip_reassdataS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to ip4_frag_c]::ip_reass_dequeue_datagram(ip_reassdata*, ip_reassdata*) &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*)
</UL>

<P><STRONG><a name="[229]"></a>[local to ip4_frag_c]::ip_frag_free_pbuf_custom_ref(pbuf_custom_ref*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef28ip_frag_free_pbuf_custom_refEP15pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to ip4_frag_c]::ip_frag_free_pbuf_custom_ref(pbuf_custom_ref*) &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ipfrag_free_pbuf_custom(pbuf*)
</UL>

<P><STRONG><a name="[22b]"></a>[local to ip4_frag_c]::ip_frag_alloc_pbuf_custom_ref()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef29ip_frag_alloc_pbuf_custom_refEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to ip4_frag_c]::ip_frag_alloc_pbuf_custom_ref() &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[22c]"></a>[local to ip4_frag_c]::ip_reass_enqueue_new_datagram(ip_hdr*, int)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef29ip_reass_enqueue_new_datagramEP6ip_hdri))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = [local to ip4_frag_c]::ip_reass_enqueue_new_datagram(ip_hdr*, int) &rArr; [local to ip4_frag_c]::ip_reass_remove_oldest_datagram(ip_hdr*, int) &rArr; [local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*) &rArr; icmp_time_exceeded &rArr; [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_remove_oldest_datagram(ip_hdr*, int)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[22e]"></a>[local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*)</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef31ip_reass_free_complete_datagramEP12ip_reassdataS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = [local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*) &rArr; icmp_time_exceeded &rArr; [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_dequeue_datagram(ip_reassdata*, ip_reassdata*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_remove_oldest_datagram(ip_hdr*, int)
</UL>

<P><STRONG><a name="[22d]"></a>[local to ip4_frag_c]::ip_reass_remove_oldest_datagram(ip_hdr*, int)</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef31ip_reass_remove_oldest_datagramEP6ip_hdri))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = [local to ip4_frag_c]::ip_reass_remove_oldest_datagram(ip_hdr*, int) &rArr; [local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*) &rArr; icmp_time_exceeded &rArr; [local to icmp_c]::icmp_send_response(pbuf*, unsigned char, unsigned char) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_free_complete_datagram(ip_reassdata*, ip_reassdata*)
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ip4_frag_c]::ip_reass_enqueue_new_datagram(ip_hdr*, int)
</UL>

<P><STRONG><a name="[230]"></a>[local to ip4_frag_c]::ip_reass_chain_frag_into_datagram_and_validate(ip_reassdata*, pbuf*, int)</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, ip4_frag.o(i._ZN32_INTERNAL_10_ip4_frag_c_8e8622ef46ip_reass_chain_frag_into_datagram_and_validateEP12ip_reassdataP4pbufi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to ip4_frag_c]::ip_reass_chain_frag_into_datagram_and_validate(ip_reassdata*, pbuf*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[d2]"></a>__sti___7_Dns_cpp_47d277ed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dns_1.o(i.__sti___7_Dns_cpp_47d277ed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___7_Dns_cpp_47d277ed &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_1.o(.init_array)
</UL>
<P><STRONG><a name="[d3]"></a>__sti___18_EthernetClient_cpp_9c6d844e</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ethernetclient.o(i.__sti___18_EthernetClient_cpp_9c6d844e))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___18_EthernetClient_cpp_9c6d844e &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetclient.o(.init_array)
</UL>
<P><STRONG><a name="[d4]"></a>__sti___18_EthernetServer_cpp_6b0e7c9c</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ethernetserver.o(i.__sti___18_EthernetServer_cpp_6b0e7c9c))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___18_EthernetServer_cpp_6b0e7c9c &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetserver.o(.init_array)
</UL>
<P><STRONG><a name="[d5]"></a>__sti___15_EthernetUdp_cpp_3bc8c3f9</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ethernetudp.o(i.__sti___15_EthernetUdp_cpp_3bc8c3f9))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___15_EthernetUdp_cpp_3bc8c3f9 &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetudp.o(.init_array)
</UL>
<P><STRONG><a name="[d6]"></a>__sti___17_STM32Ethernet_cpp_45d98dc9</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32ethernet.o(i.__sti___17_STM32Ethernet_cpp_45d98dc9))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __sti___17_STM32Ethernet_cpp_45d98dc9 &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32ethernet.o(.init_array)
</UL>
<P><STRONG><a name="[23b]"></a>[local to ethernetif_cpp]::low_level_init(netif*)</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, ethernetif.o(i._ZN36_INTERNAL_14_ethernetif_cpp_04a99f9b14low_level_initEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = [local to ethernetif_cpp]::low_level_init(netif*) &rArr; ethernet_link_check_state &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; [local to dhcp_c]::dhcp_reboot(netif*) &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_DescAssignMemory
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init_pool
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_RegisterBusIO
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LAN8742_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[240]"></a>[local to ethernetif_cpp]::low_level_input(netif*)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, ethernetif.o(i._ZN36_INTERNAL_14_ethernetif_cpp_04a99f9b15low_level_inputEP5netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to ethernetif_cpp]::low_level_input(netif*) &rArr; pbuf_alloced_custom &rArr; [local to pbuf_c]::pbuf_init_alloced_pbuf(pbuf*, void*, unsigned short, unsigned short, pbuf_type, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_IsRxDataAvailable
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataLength
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_GetRxDataBuffer
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_BuildRxDescriptors
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::SCB_InvalidateDCache_by_Addr(unsigned*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[b9]"></a>[local to ethernetif_cpp]::low_level_output(netif*, pbuf*)</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, ethernetif.o(i._ZN36_INTERNAL_14_ethernetif_cpp_04a99f9b16low_level_outputEP5netifP4pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = [local to ethernetif_cpp]::low_level_output(netif*, pbuf*) &rArr; HAL_ETH_Transmit &rArr; [local to stm32h7xx_hal_eth_c]::ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef*, ETH_TxPacketConfig*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ETH_Transmit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[242]"></a>[local to ethernetif_cpp]::SCB_InvalidateDCache_by_Addr(unsigned*, int)</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, ethernetif.o(i._ZN36_INTERNAL_14_ethernetif_cpp_04a99f9b28SCB_InvalidateDCache_by_AddrEPji))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to ethernetif_cpp]::SCB_InvalidateDCache_by_Addr(unsigned*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_custom
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ethernetif_cpp]::low_level_input(netif*)
</UL>

<P><STRONG><a name="[d7]"></a>__sti___14_ethernetif_cpp_04a99f9b</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ethernetif.o(i.__sti___14_ethernetif_cpp_04a99f9b))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___14_ethernetif_cpp_04a99f9b &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.init_array)
</UL>
<P><STRONG><a name="[1a1]"></a>[local to main_c]::MPU_Config()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(i._ZN21_INTERNAL_6_main_c_ip10MPU_ConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = [local to main_c]::MPU_Config() &rArr; HAL_MPU_ConfigRegion
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>[local to main_c]::CPU_CACHE_Enable()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i._ZN21_INTERNAL_6_main_c_ip16CPU_CACHE_EnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to main_c]::CPU_CACHE_Enable() &rArr; [local to main_c]::SCB_EnableDCache()
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::SCB_EnableICache()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::SCB_EnableDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>[local to main_c]::SCB_EnableDCache()</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i._ZN21_INTERNAL_6_main_c_ip16SCB_EnableDCacheEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to main_c]::SCB_EnableDCache()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::CPU_CACHE_Enable()
</UL>

<P><STRONG><a name="[1a6]"></a>[local to main_c]::SCB_EnableICache()</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(i._ZN21_INTERNAL_6_main_c_ip16SCB_EnableICacheEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to main_c]::CPU_CACHE_Enable()
</UL>

<P><STRONG><a name="[d8]"></a>__sti___6_main_c_ip</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.__sti___6_main_c_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __sti___6_main_c_ip &rArr; EthernetServer::EthernetServer(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetServer::EthernetServer(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[119]"></a>[local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL2_Config(RCC_PLL2InitTypeDef*, unsigned)</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i._ZN44_INTERNAL_22_stm32h7xx_hal_rcc_ex_c_bed13b4417RCCEx_PLL2_ConfigEP19RCC_PLL2InitTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL2_Config(RCC_PLL2InitTypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[11a]"></a>[local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL3_Config(RCC_PLL3InitTypeDef*, unsigned)</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i._ZN44_INTERNAL_22_stm32h7xx_hal_rcc_ex_c_bed13b4417RCCEx_PLL3_ConfigEP19RCC_PLL3InitTypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to stm32h7xx_hal_rcc_ex_c]::RCCEx_PLL3_Config(RCC_PLL3InitTypeDef*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[113]"></a>[local to stm32h7xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32h7xx_hal_cortex_c_2992dbc018__NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b5]"></a>[local to sys_c]::SPI_1_Init()</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, sys.o(i._ZN26_INTERNAL_5_sys_c_GPIO_Set10SPI_1_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to sys_c]::SPI_1_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_GPIO_Set)
</UL>
<P><STRONG><a name="[b6]"></a>[local to sys_c]::SPI_2_Init()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, sys.o(i._ZN26_INTERNAL_5_sys_c_GPIO_Set10SPI_2_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to sys_c]::SPI_2_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_GPIO_Set)
</UL>
<P><STRONG><a name="[b7]"></a>[local to sys_c]::SPI_3_Init()</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sys.o(i._ZN26_INTERNAL_5_sys_c_GPIO_Set10SPI_3_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = [local to sys_c]::SPI_3_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_GPIO_Set)
</UL>
<P><STRONG><a name="[d9]"></a>__sti___5_sys_c_GPIO_Set</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, sys.o(i.__sti___5_sys_c_GPIO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __sti___5_sys_c_GPIO_Set &rArr; USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(SPI_TypeDef*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.init_array)
</UL>
<P><STRONG><a name="[da]"></a>__sti___13_IPAddress_cpp_0fe1e075</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ipaddress.o(i.__sti___13_IPAddress_cpp_0fe1e075))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___13_IPAddress_cpp_0fe1e075 &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ipaddress.o(.init_array)
</UL>
<P><STRONG><a name="[156]"></a>[local to stm32_eth_cpp]::Netif_Config()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce12Netif_ConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = [local to stm32_eth_cpp]::Netif_Config() &rArr; netif_add &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_callback
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_check_state
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_link_status_updated(netif*)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
</UL>

<P><STRONG><a name="[a9]"></a>[local to stm32_eth_cpp]::tcp_err_callback(void*, signed char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce16tcp_err_callbackEPva))
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(i._Z19tcp_accept_callbackPvP7tcp_pcba)
</UL>
<P><STRONG><a name="[a8]"></a>[local to stm32_eth_cpp]::tcp_recv_callback(void*, tcp_pcb*, pbuf*, signed char)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce17tcp_recv_callbackEPvP7tcp_pcbP4pbufa))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = [local to stm32_eth_cpp]::tcp_recv_callback(void*, tcp_pcb*, pbuf*, signed char) &rArr; tcp_connection_close(tcp_pcb*, tcp_struct*) &rArr; tcp_close &rArr; [local to tcp_c]::tcp_close_shutdown(tcp_pcb*, unsigned char) &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connection_close(tcp_pcb*, tcp_struct*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(i._Z19tcp_accept_callbackPvP7tcp_pcba)
</UL>
<P><STRONG><a name="[aa]"></a>[local to stm32_eth_cpp]::tcp_sent_callback(void*, tcp_pcb*, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce17tcp_sent_callbackEPvP7tcp_pcbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32_eth_cpp]::tcp_sent_callback(void*, tcp_pcb*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(i._Z19tcp_accept_callbackPvP7tcp_pcba)
</UL>
<P><STRONG><a name="[b2]"></a>[local to stm32_eth_cpp]::scheduler_callback(HardwareTimer*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce18scheduler_callbackEP13HardwareTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = [local to stm32_eth_cpp]::scheduler_callback(HardwareTimer*) &rArr; stm32_eth_scheduler() &rArr; stm32_DHCP_Periodic_Handle(netif*) &rArr; stm32_DHCP_process(netif*) &rArr; dhcp_start &rArr; dhcp_release_and_stop &rArr; netif_set_addr &rArr; [local to netif_c]::netif_do_set_ipaddr(netif*, const ip4_addr*, ip4_addr*) &rArr; [local to netif_c]::netif_do_ip_addr_changed(const ip4_addr*, const ip4_addr*) &rArr; tcp_netif_ip_addr_changed &rArr; [local to tcp_c]::tcp_netif_ip_addr_changed_pcblist(const ip4_addr*, tcp_pcb*) &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_send_empty_ack &rArr; [local to tcp_out_c]::tcp_output_control_segment(const tcp_pcb*, pbuf*, const ip4_addr*, const ip4_addr*) &rArr; ip4_output_if &rArr; ip4_output_if_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; [local to mem_c]::mem_link_valid(mem*)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_scheduler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce20TIM_scheduler_ConfigEv)
</UL>
<P><STRONG><a name="[157]"></a>[local to stm32_eth_cpp]::TIM_scheduler_Config()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32_eth.o(i._ZN35_INTERNAL_13_stm32_eth_cpp_0d3fddce20TIM_scheduler_ConfigEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = [local to stm32_eth_cpp]::TIM_scheduler_Config() &rArr; HardwareTimer::setOverflow(unsigned, TimerFormat_t) &rArr; HardwareTimer::getTimerClkFreq() &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCCEx_GetD1SysClockFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resume()
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::attachInterrupt(void(*)(HardwareTimer*))
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setOverflow(unsigned, TimerFormat_t)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_eth_init(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
</UL>

<P><STRONG><a name="[db]"></a>__sti___13_stm32_eth_cpp_0d3fddce</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32_eth.o(i.__sti___13_stm32_eth_cpp_0d3fddce))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __sti___13_stm32_eth_cpp_0d3fddce &rArr; IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPAddress::IPAddress(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_eth.o(.init_array)
</UL>
<P><STRONG><a name="[13a]"></a>[local to stm32h7xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, stm32h7xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_tim_c_a9d95b5217TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = [local to stm32h7xx_hal_tim_c]::TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[13c]"></a>[local to stm32h7xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_tim_c_a9d95b5217TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to stm32h7xx_hal_tim_c]::TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[13d]"></a>[local to stm32h7xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_tim_c_a9d95b5217TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32h7xx_hal_tim_c]::TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[13e]"></a>[local to stm32h7xx_hal_tim_c]::TIM_OC5_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_tim_c_a9d95b5217TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to stm32h7xx_hal_tim_c]::TIM_OC5_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[13f]"></a>[local to stm32h7xx_hal_tim_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32h7xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_tim_c_a9d95b5217TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to stm32h7xx_hal_tim_c]::TIM_OC6_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[12e]"></a>[local to stm32h7xx_hal_tim_c]::TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32h7xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32h7xx_hal_tim_c_a9d95b5217TIM_TI2_SetConfigEP11TIM_TypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32h7xx_hal_tim_c]::TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[122]"></a>[local to stm32h7xx_hal_tim_ex_c]::TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_tim_ex.o(i._ZN44_INTERNAL_22_stm32h7xx_hal_tim_ex_c_e8ef392018TIM_CCxNChannelCmdEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32h7xx_hal_tim_ex_c]::TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
</UL>

<P><STRONG><a name="[255]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[a7]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
