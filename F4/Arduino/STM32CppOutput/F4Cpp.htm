<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\STM32CppOutput\F4Cpp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\STM32CppOutput\F4Cpp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Aug 04 15:45:37 2024
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SdFile::write(unsigned char) &rArr; SdFile::write(const void*, unsigned short) &rArr; SdFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[26]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream0_IRQHandler</a> from sys.o(i.DMA1_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream1_IRQHandler</a> from sys.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream2_IRQHandler</a> from sys.o(i.DMA1_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream3_IRQHandler</a> from sys.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream4_IRQHandler</a> from sys.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream5_IRQHandler</a> from sys.o(i.DMA1_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream6_IRQHandler</a> from sys.o(i.DMA1_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream7_IRQHandler</a> from sys.o(i.DMA1_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream0_IRQHandler</a> from sys.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream1_IRQHandler</a> from sys.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream2_IRQHandler</a> from sys.o(i.DMA2_Stream2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream3_IRQHandler</a> from sys.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream4_IRQHandler</a> from sys.o(i.DMA2_Stream4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream5_IRQHandler</a> from sys.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream6_IRQHandler</a> from sys.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream7_IRQHandler</a> from sys.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from sys.o(i.EXTI0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from sys.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from sys.o(i.EXTI1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from sys.o(i.EXTI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from sys.o(i.EXTI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from sys.o(i.EXTI4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from sys.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[16]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_TIM9_IRQHandler</a> from hardwaretimer.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from hardwaretimer.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_TIM11_IRQHandler</a> from hardwaretimer.o(i.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_TIM10_IRQHandler</a> from hardwaretimer.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from hardwaretimer.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from hardwaretimer.o(i.TIM3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from hardwaretimer.o(i.TIM4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM5_IRQHandler</a> from hardwaretimer.o(i.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">TIM6_DAC_IRQHandler</a> from hardwaretimer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM7_IRQHandler</a> from hardwaretimer.o(i.TIM7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_BRK_TIM12_IRQHandler</a> from hardwaretimer.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM8_CC_IRQHandler</a> from hardwaretimer.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_TRG_COM_TIM14_IRQHandler</a> from hardwaretimer.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_UP_TIM13_IRQHandler</a> from hardwaretimer.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from sys.o(i.UART4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from sys.o(i.UART5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from sys.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from sys.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from sys.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">USART6_IRQHandler</a> from sys.o(i.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">SPI_1_Init()</a> from sys.o(i._Z10SPI_1_Initv) referenced from sys.o(i.__sti___5_sys_c_GPIO_Set)
 <LI><a href="#[69]">SPI_2_Init()</a> from sys.o(i._Z10SPI_2_Initv) referenced from sys.o(i.__sti___5_sys_c_GPIO_Set)
 <LI><a href="#[6a]">SPI_3_Init()</a> from sys.o(i._Z10SPI_3_Initv) referenced from sys.o(i.__sti___5_sys_c_GPIO_Set)
 <LI><a href="#[6b]">b0PushCallback(void*)</a> from main.o(i._Z14b0PushCallbackPv) referenced from main.o(i.main)
 <LI><a href="#[6c]">b1PushCallback(void*)</a> from main.o(i._Z14b1PushCallbackPv) referenced from main.o(i.main)
 <LI><a href="#[6d]">b2PushCallback(void*)</a> from main.o(i._Z14b2PushCallbackPv) referenced from main.o(i.main)
 <LI><a href="#[6e]">b3PushCallback(void*)</a> from main.o(i._Z14b3PushCallbackPv) referenced from main.o(i.main)
 <LI><a href="#[72]">USARTClass::read()</a> from usartclass.o(i._ZN10USARTClass4readEv) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[6f]">USARTClass::write(unsigned char)</a> from usartclass.o(i._ZN10USARTClass5writeEh) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[71]">USARTClass::available()</a> from usartclass.o(i._ZN10USARTClass9availableEv) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[70]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[70]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[70]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from sdfile.o(.constdata__ZTV6SdFile)
 <LI><a href="#[74]">SdFile::write(unsigned char)</a> from sdfile.o(i._ZN6SdFile5writeEh) referenced from sdfile.o(.constdata__ZTV6SdFile)
 <LI><a href="#[73]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[67]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[77]">__sti___5_sys_c_GPIO_Set</a> from sys.o(i.__sti___5_sys_c_GPIO_Set) referenced from sys.o(.init_array)
 <LI><a href="#[75]">__sti___6_SD_cpp_426a88ba</a> from sd.o(i.__sti___6_SD_cpp_426a88ba) referenced from sd.o(.init_array)
 <LI><a href="#[76]">__sti___6_main_c_b0</a> from main.o(i.__sti___6_main_c_b0) referenced from main.o(.init_array)
 <LI><a href="#[65]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[79]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ef]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7b]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[f0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[be]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>

<P><STRONG><a name="[78]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[e8]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Stream7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Stream7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sys.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sys.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>

<P><STRONG><a name="[80]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_Init</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_Init()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_Init()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_Init()
</UL>

<P><STRONG><a name="[a0]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>

<P><STRONG><a name="[9e]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[81]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[84]"></a>HAL_MspInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>

<P><STRONG><a name="[b3]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[b4]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[87]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[82]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[89]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 680 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[85]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[8d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[8b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[8e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 996 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a1]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[90]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8f]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[97]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig(UART_HandleTypeDef*) &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(UART_HandleTypeDef*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[9c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SystemClock_Config</STRONG> (Thumb, 218 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM1_TRG_COM_TIM11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_TRG_COM_TIM11_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardwaretimer.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USART6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART6_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>b0PushCallback(void*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i._Z14b0PushCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = b0PushCallback(void*) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::write(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[6c]"></a>b1PushCallback(void*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i._Z14b1PushCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = b1PushCallback(void*) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::write(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[6d]"></a>b2PushCallback(void*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i._Z14b2PushCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = b2PushCallback(void*) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::write(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[6e]"></a>b3PushCallback(void*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i._Z14b3PushCallbackPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = b3PushCallback(void*) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::write(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[ab]"></a>nexLoop(NexTouch**)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, nexhardware.o(i._Z7nexLoopPP8NexTouch))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nexLoop(NexTouch**) &rArr; NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int) &rArr; NexObject::printObjInfo() &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::available()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>RingBuffer::store_char(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBuffer10store_charEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::store_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[af]"></a>RingBuffer::RingBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::RingBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_GPIO_Set
</UL>

<P><STRONG><a name="[f8]"></a>RingBuffer::RingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev), UNUSED)

<P><STRONG><a name="[a2]"></a>USARTClass::IrqHandler()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usartclass.o(i._ZN10USARTClass10IrqHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::store_char(unsigned char)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>USARTClass::read()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nexLoop(NexTouch**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[b2]"></a>USARTClass::begin(unsigned)</STRONG> (Thumb, 722 bytes, Stack size 120 bytes, usartclass.o(i._ZN10USARTClass5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USARTClass::begin(unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>USARTClass::write(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass5writeEh))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b3PushCallback(void*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b2PushCallback(void*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b1PushCallback(void*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b0PushCallback(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[71]"></a>USARTClass::available()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass9availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nexLoop(NexTouch**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[e9]"></a>USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_GPIO_Set
</UL>

<P><STRONG><a name="[f9]"></a>USARTClass::USARTClass__sub_object(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer), UNUSED)

<P><STRONG><a name="[9a]"></a>HardwareTimer::updateCallback(TIM_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardwaretimer.o(i._ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[92]"></a>HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hardwaretimer.o(i._ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[b7]"></a>Print::printNumber(unsigned long, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, print.o(i._ZN5Print11printNumberEmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>

<P><STRONG><a name="[a5]"></a>Print::print(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexObject::printObjInfo()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b3PushCallback(void*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b2PushCallback(void*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b1PushCallback(void*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b0PushCallback(void*)
</UL>

<P><STRONG><a name="[bd]"></a>Print::print(char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>

<P><STRONG><a name="[b9]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexObject::printObjInfo()
</UL>

<P><STRONG><a name="[a6]"></a>Print::print(int, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b3PushCallback(void*)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b2PushCallback(void*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b1PushCallback(void*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;b0PushCallback(void*)
</UL>

<P><STRONG><a name="[bc]"></a>Print::print(unsigned, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexObject::printObjInfo()
</UL>

<P><STRONG><a name="[bb]"></a>Print::print(long, int)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>

<P><STRONG><a name="[ba]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>

<P><STRONG><a name="[b8]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[70]"></a>Print::write(const unsigned char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, print.o(i._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> sdfile.o(.constdata__ZTV6SdFile)
<LI> usartclass.o(.constdata__ZTV10USARTClass)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[bf]"></a>Print::println(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexObject::printObjInfo()
</UL>

<P><STRONG><a name="[c0]"></a>Print::println()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>

<P><STRONG><a name="[c1]"></a>SdFile::addCluster()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdfile.o(i._ZN6SdFile10addClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SdFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[c3]"></a>SdFile::cacheDirEntry(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sdfile.o(i._ZN6SdFile13cacheDirEntryEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SdFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::sync()
</UL>

<P><STRONG><a name="[c5]"></a>SdFile::sync()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sdfile.o(i._ZN6SdFile4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SdFile::sync() &rArr; SdFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::isOpen() const
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::isDir() const
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[c9]"></a>SdFile::write(const void*, unsigned short)</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, sdfile.o(i._ZN6SdFile5writeEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SdFile::write(const void*, unsigned short) &rArr; SdFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::seekSet(unsigned)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::sync()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*) const
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::blockOfCluster(unsigned) const
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::isFile() const
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheSetDirty()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::addCluster()
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(unsigned char)
</UL>

<P><STRONG><a name="[74]"></a>SdFile::write(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sdfile.o(i._ZN6SdFile5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SdFile::write(unsigned char) &rArr; SdFile::write(const void*, unsigned short) &rArr; SdFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdfile.o(.constdata__ZTV6SdFile)
</UL>
<P><STRONG><a name="[cb]"></a>SdFile::seekSet(unsigned)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sdfile.o(i._ZN6SdFile7seekSetEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SdFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::isOpen() const
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[eb]"></a>SdFile::SdFile()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sd.o(i._ZN6SdFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_SD_cpp_426a88ba
</UL>

<P><STRONG><a name="[fa]"></a>SdFile::SdFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sd.o(i._ZN6SdFileC1Ev), UNUSED)

<P><STRONG><a name="[d0]"></a>Sd2Card::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sd2card.o(i._ZN7Sd2Card10writeBlockEjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::type() const
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::error(unsigned char)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitNotBusy(unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
</UL>

<P><STRONG><a name="[d4]"></a>Sd2Card::cardCommand(unsigned char, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sd2card.o(i._ZN7Sd2Card11cardCommandEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readEnd()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectLow()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitNotBusy(unsigned short)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend(unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[d6]"></a>Sd2Card::waitNotBusy(unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sd2card.o(i._ZN7Sd2Card11waitNotBusyEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[d9]"></a>Sd2Card::chipSelectLow()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sd2card.o(i._ZN7Sd2Card13chipSelectLowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sd2Card::chipSelectLow()
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[d7]"></a>Sd2Card::chipSelectHigh()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sd2card.o(i._ZN7Sd2Card14chipSelectHighEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sd2Card::chipSelectHigh()
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readEnd()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[dc]"></a>Sd2Card::waitStartBlock()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sd2card.o(i._ZN7Sd2Card14waitStartBlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sd2Card::waitStartBlock() &rArr; Sd2Card::chipSelectHigh()
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::error(unsigned char)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[d2]"></a>Sd2Card::error(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sd2card.o(i._ZN7Sd2Card5errorEh))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[d8]"></a>Sd2Card::readEnd()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sd2card.o(i._ZN7Sd2Card7readEndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sd2Card::readEnd() &rArr; Sd2Card::chipSelectHigh()
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[dd]"></a>Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, sd2card.o(i._ZN7Sd2Card8readDataEjttPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::type() const
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readEnd()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::error(unsigned char)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readBlock(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[de]"></a>Sd2Card::readBlock(unsigned, unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sd2card.o(i._ZN7Sd2Card9readBlockEjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[d5]"></a>Sd2Card::writeData(unsigned char, const unsigned char*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sd2card.o(i._ZN7Sd2Card9writeDataEhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sd2Card::writeData(unsigned char, const unsigned char*) &rArr; Sd2Card::chipSelectHigh()
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::error(unsigned char)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend(unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[ec]"></a>NexTouch::attachPush(void(*)(void*), void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nextouch.o(i._ZN8NexTouch10attachPushEPFvPvES0_))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>NexTouch::pop()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nextouch.o(i._ZN8NexTouch3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NexTouch::pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[e2]"></a>NexTouch::push()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nextouch.o(i._ZN8NexTouch4pushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NexTouch::push()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[ad]"></a>NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, nextouch.o(i._ZN8NexTouch7iterateEPPS_hhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int) &rArr; NexObject::printObjInfo() &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexObject::getObjPid()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexObject::getObjCid()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexObject::printObjInfo()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::push()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::pop()
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nexLoop(NexTouch**)
</UL>

<P><STRONG><a name="[e4]"></a>NexTouch::NexTouch(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nextouch.o(i._ZN8NexTouchC1EhhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NexTouch::NexTouch(unsigned char, unsigned char, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexObject::NexObject(unsigned char, unsigned char, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexButton::NexButton(unsigned char, unsigned char, const char*)
</UL>

<P><STRONG><a name="[fb]"></a>NexTouch::NexTouch__sub_object(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nextouch.o(i._ZN8NexTouchC1EhhPKc), UNUSED)

<P><STRONG><a name="[aa]"></a>SPIClass::transfer(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClass8transferEh))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend(unsigned char)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>

<P><STRONG><a name="[ea]"></a>SPIClass::SPIClass(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_GPIO_Set
</UL>

<P><STRONG><a name="[fc]"></a>SPIClass::SPIClass__sub_object(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE), UNUSED)

<P><STRONG><a name="[c8]"></a>SdVolume::cacheFlush()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sdvolume.o(i._ZN8SdVolume10cacheFlushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::sync()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[c4]"></a>SdVolume::cacheRawBlock(unsigned, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sdvolume.o(i._ZN8SdVolume13cacheRawBlockEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readBlock(unsigned, unsigned char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*) const
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::cacheDirEntry(unsigned char)
</UL>

<P><STRONG><a name="[d1]"></a>SdVolume::cacheSetDirty()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdfile.o(i._ZN8SdVolume13cacheSetDirtyEv))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
</UL>

<P><STRONG><a name="[c2]"></a>SdVolume::allocContiguous(unsigned, unsigned*)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, sdvolume.o(i._ZN8SdVolume15allocContiguousEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*) const
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::addCluster()
</UL>

<P><STRONG><a name="[e6]"></a>SdVolume::fatPut(unsigned, unsigned)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, sdvolume.o(i._ZN8SdVolume6fatPutEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheSetDirty()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
</UL>

<P><STRONG><a name="[e7]"></a>NexButton::NexButton(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nexbutton.o(i._ZN9NexButtonC1EhhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NexButton::NexButton(unsigned char, unsigned char, const char*) &rArr; NexTouch::NexTouch(unsigned char, unsigned char, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::NexTouch(unsigned char, unsigned char, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_b0
</UL>

<P><STRONG><a name="[fd]"></a>NexButton::NexButton__sub_object(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, nexbutton.o(i._ZN9NexButtonC1EhhPKc), UNUSED)

<P><STRONG><a name="[e1]"></a>NexObject::printObjInfo()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, nexobject.o(i._ZN9NexObject12printObjInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NexObject::printObjInfo() &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[e0]"></a>NexObject::getObjCid()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nexobject.o(i._ZN9NexObject9getObjCidEv))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[df]"></a>NexObject::getObjPid()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nexobject.o(i._ZN9NexObject9getObjPidEv))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::iterate(NexTouch**, unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[e5]"></a>NexObject::NexObject(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nexobject.o(i._ZN9NexObjectC1EhhPKc))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::NexTouch(unsigned char, unsigned char, const char*)
</UL>

<P><STRONG><a name="[fe]"></a>NexObject::NexObject__sub_object(unsigned char, unsigned char, const char*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nexobject.o(i._ZN9NexObjectC1EhhPKc), UNUSED)

<P><STRONG><a name="[c7]"></a>SdFile::isDir() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdfile.o(i._ZNK6SdFile5isDirEv))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::sync()
</UL>

<P><STRONG><a name="[ca]"></a>SdFile::isFile() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdfile.o(i._ZNK6SdFile6isFileEv))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[c6]"></a>SdFile::isOpen() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sd.o(i._ZNK6SdFile6isOpenEv))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::seekSet(unsigned)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::sync()
</UL>

<P><STRONG><a name="[d3]"></a>Sd2Card::type() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd2card.o(i._ZNK7Sd2Card4typeEv))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[cc]"></a>SdVolume::blockOfCluster(unsigned) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdfile.o(i._ZNK8SdVolume14blockOfClusterEj))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[cf]"></a>SdVolume::clusterStartBlock(unsigned) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdfile.o(i._ZNK8SdVolume17clusterStartBlockEj))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[ce]"></a>SdVolume::isEOC(unsigned) const</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sdfile.o(i._ZNK8SdVolume5isEOCEj))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[cd]"></a>SdVolume::fatGet(unsigned, unsigned*) const</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sdvolume.o(i._ZNK8SdVolume6fatGetEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::waitNotBusy(unsigned short) &rArr; spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::seekSet(unsigned)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
</UL>

<P><STRONG><a name="[73]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[ff]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[100]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[101]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ac]"></a>delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nexLoop(NexTouch**)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>digitalWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectLow()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>get_timer_obj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.get_timer_obj))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>

<P><STRONG><a name="[65]"></a>main</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; USARTClass::begin(unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nexLoop(NexTouch**)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexTouch::attachPush(void(*)(void*), void*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;togglePin
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[da]"></a>millis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.millis))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitNotBusy(unsigned short)
</UL>

<P><STRONG><a name="[a3]"></a>pinMode</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, sys.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_Init()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_Init()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_Init()
</UL>

<P><STRONG><a name="[ed]"></a>togglePin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sys.o(i.togglePin))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[75]"></a>__sti___6_SD_cpp_426a88ba</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sd.o(i.__sti___6_SD_cpp_426a88ba))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___6_SD_cpp_426a88ba
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd.o(.init_array)
</UL>
<P><STRONG><a name="[a9]"></a>spiRec()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sd2card.o(i._Z6spiRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spiRec()
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readEnd()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitNotBusy(unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[ae]"></a>spiSend(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sd2card.o(i._Z7spiSendh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spiSend(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[76]"></a>__sti___6_main_c_b0</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.__sti___6_main_c_b0))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __sti___6_main_c_b0 &rArr; NexButton::NexButton(unsigned char, unsigned char, const char*) &rArr; NexTouch::NexTouch(unsigned char, unsigned char, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NexButton::NexButton(unsigned char, unsigned char, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[88]"></a>NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i._Z16NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[68]"></a>SPI_1_Init()</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, sys.o(i._Z10SPI_1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_1_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_GPIO_Set)
</UL>
<P><STRONG><a name="[69]"></a>SPI_2_Init()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, sys.o(i._Z10SPI_2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_2_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_GPIO_Set)
</UL>
<P><STRONG><a name="[6a]"></a>SPI_3_Init()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, sys.o(i._Z10SPI_3_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_3_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_GPIO_Set)
</UL>
<P><STRONG><a name="[77]"></a>__sti___5_sys_c_GPIO_Set</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, sys.o(i.__sti___5_sys_c_GPIO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___5_sys_c_GPIO_Set &rArr; USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(SPI_TypeDef*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.init_array)
</UL>
<P><STRONG><a name="[a7]"></a>USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usartclass.o(i._Z23USART_INT_ClearAllFlagsP13USART_TypeDef9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[9d]"></a>UART_SetConfig(UART_HandleTypeDef*)</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i._Z14UART_SetConfigP18UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig(UART_HandleTypeDef*) &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
