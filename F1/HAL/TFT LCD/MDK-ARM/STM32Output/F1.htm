<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\STM32Output\F1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\STM32Output\F1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Thu Mar 09 22:09:15 2023
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; testFilledCircles &rArr; TFT_fillCircle &rArr; TFT_fillCircleHelper &rArr; TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[49]">height</a> from tft.o(i.height) referenced from tft.o(i.TFT_begin)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4a]">width</a> from tft.o(i.width) referenced from tft.o(i.TFT_begin)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[9f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_scrollup
</UL>

<P><STRONG><a name="[99]"></a>HAL_GPIO_Init</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[4f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[63]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[50]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[53]"></a>HAL_MspInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[55]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[51]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[57]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[58]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[59]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[5a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[5c]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[5b]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>STM32_TFT_8bit</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, tft.o(i.STM32_TFT_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STM32_TFT_8bit &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_enablePortClock
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SystemClock_Config</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>TFT_begin</STRONG> (Thumb, 782 bytes, Stack size 40 bytes, tft.o(i.TFT_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TFT_begin &rArr; TFT_readPixel &rArr; TFT_readGRAM &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setRotation
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawPixel
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushCommand
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table16
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readPixel
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_invertDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>TFT_color565</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tft.o(i.TFT_color565))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
</UL>

<P><STRONG><a name="[6d]"></a>TFT_drawChar</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, tft.o(i.TFT_drawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TFT_drawChar &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillRect
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_write
</UL>

<P><STRONG><a name="[6f]"></a>TFT_drawCircle</STRONG> (Thumb, 252 bytes, Stack size 60 bytes, tft.o(i.TFT_drawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TFT_drawCircle &rArr; TFT_drawPixel &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles
</UL>

<P><STRONG><a name="[70]"></a>TFT_drawFastHLine</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tft.o(i.TFT_drawFastHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TFT_drawFastHLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawLine
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines
</UL>

<P><STRONG><a name="[71]"></a>TFT_drawFastVLine</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tft.o(i.TFT_drawFastVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillCircle
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawLine
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillCircleHelper
</UL>

<P><STRONG><a name="[72]"></a>TFT_drawLine</STRONG> (Thumb, 308 bytes, Stack size 44 bytes, tft.o(i.TFT_drawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TFT_drawLine &rArr; TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawPixel
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawFastVLine
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawFastHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines
</UL>

<P><STRONG><a name="[6a]"></a>TFT_drawPixel</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tft.o(i.TFT_drawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TFT_drawPixel &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParam4
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawLine
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawCircle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_begin
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawChar
</UL>

<P><STRONG><a name="[5e]"></a>TFT_enablePortClock</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tft.o(i.TFT_enablePortClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_enablePortClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TFT_8bit
</UL>

<P><STRONG><a name="[75]"></a>TFT_fillCircle</STRONG> (Thumb, 48 bytes, Stack size 28 bytes, tft.o(i.TFT_fillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TFT_fillCircle &rArr; TFT_fillCircleHelper &rArr; TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawFastVLine
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillCircleHelper
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles
</UL>

<P><STRONG><a name="[76]"></a>TFT_fillCircleHelper</STRONG> (Thumb, 224 bytes, Stack size 52 bytes, tft.o(i.TFT_fillCircleHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = TFT_fillCircleHelper &rArr; TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawFastVLine
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillCircle
</UL>

<P><STRONG><a name="[6e]"></a>TFT_fillRect</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tft.o(i.TFT_fillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataWord
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillScreen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawFastVLine
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawFastHLine
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawChar
</UL>

<P><STRONG><a name="[7a]"></a>TFT_fillScreen</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tft.o(i.TFT_fillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TFT_fillScreen &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFillScreen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>TFT_invertDisplay</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, tft.o(i.TFT_invertDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TFT_invertDisplay &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParamN
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdData
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_begin
</UL>

<P><STRONG><a name="[7c]"></a>TFT_printnewtstr</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, tft.o(i.TFT_printnewtstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TFT_printnewtstr &rArr; TFT_write &rArr; TFT_drawChar &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setFont
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>TFT_readGRAM</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, tft.o(i.TFT_readGRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TFT_readGRAM &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWriteDataBus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadDataBus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read16bits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setAddrWindow
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_color565
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readPixel
</UL>

<P><STRONG><a name="[86]"></a>TFT_readID</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, tft.o(i.TFT_readID))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TFT_readID &rArr; readReg40 &rArr; readReg16Index &rArr; read8bits &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg40
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg32
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>TFT_readPixel</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tft.o(i.TFT_readPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TFT_readPixel &rArr; TFT_readGRAM &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_begin
</UL>

<P><STRONG><a name="[8a]"></a>TFT_scrollup</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tft.o(i.TFT_scrollup))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TFT_scrollup &rArr; TFT_vertScroll &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_vertScroll
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>TFT_setAddrWindow</STRONG> (Thumb, 194 bytes, Stack size 28 bytes, tft.o(i.TFT_setAddrWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParam4
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdData
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setRotation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillRect
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
</UL>

<P><STRONG><a name="[7e]"></a>TFT_setCursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tft.o(i.TFT_setCursor))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_printnewtstr
</UL>

<P><STRONG><a name="[7d]"></a>TFT_setFont</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tft.o(i.TFT_setFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TFT_setFont
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_printnewtstr
</UL>

<P><STRONG><a name="[68]"></a>TFT_setRotation</STRONG> (Thumb, 684 bytes, Stack size 28 bytes, tft.o(i.TFT_setRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TFT_setRotation &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParamN
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdData
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_vertScroll
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_begin
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>TFT_setTextBgColor</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tft.o(i.TFT_setTextBgColor))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>TFT_vertScroll</STRONG> (Thumb, 322 bytes, Stack size 28 bytes, tft.o(i.TFT_vertScroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = TFT_vertScroll &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParamN
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdData
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setRotation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_scrollup
</UL>

<P><STRONG><a name="[7f]"></a>TFT_write</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, tft.o(i.TFT_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = TFT_write &rArr; TFT_drawChar &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_printnewtstr
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>WriteCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tft.o(i.WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteCmd &rArr; writeCmdWord &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmdWord
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillRect
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
</UL>

<P><STRONG><a name="[74]"></a>WriteCmdData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tft.o(i.WriteCmdData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteCmdData &rArr; writeDataWord &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataWord
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setRotation
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawPixel
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_vertScroll
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setAddrWindow
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_invertDisplay
</UL>

<P><STRONG><a name="[73]"></a>WriteCmdParam4</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, tft.o(i.WriteCmdParam4))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParamN
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawPixel
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setAddrWindow
</UL>

<P><STRONG><a name="[7b]"></a>WriteCmdParamN</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, tft.o(i.WriteCmdParamN))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataByte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setRotation
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushCommand
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParam4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_vertScroll
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_invertDisplay
</UL>

<P><STRONG><a name="[a4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[62]"></a>delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sys.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TFT_8bit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table16
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table
</UL>

<P><STRONG><a name="[8c]"></a>delay_us</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_scrollup
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8bits
</UL>

<P><STRONG><a name="[49]"></a>height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tft.o(i.height))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tft.o(i.TFT_begin)
</UL>
<P><STRONG><a name="[67]"></a>init_table</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tft.o(i.init_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_table &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParamN
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_begin
</UL>

<P><STRONG><a name="[66]"></a>init_table16</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tft.o(i.init_table16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = init_table16 &rArr; writeDataWord &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataWord
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_begin
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; testFilledCircles &rArr; TFT_fillCircle &rArr; TFT_fillCircleHelper &rArr; TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;width
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;height
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setTextBgColor
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_setRotation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_scrollup
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readID
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_printnewtstr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillScreen
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawPixel
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_begin
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TFT_8bit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFillScreen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[91]"></a>micros</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sys.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = micros
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[92]"></a>pinMode</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, sys.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>pushCommand</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tft.o(i.pushCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pushCommand &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParamN
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_begin
</UL>

<P><STRONG><a name="[82]"></a>read16bits</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, tft.o(i.read16bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read16bits
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
</UL>

<P><STRONG><a name="[83]"></a>read8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tft.o(i.read8))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8bits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read16bits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
</UL>

<P><STRONG><a name="[9a]"></a>read8bits</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tft.o(i.read8bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read8bits &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16Index
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16
</UL>

<P><STRONG><a name="[87]"></a>readReg16</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tft.o(i.readReg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = readReg16 &rArr; read8bits &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmdWord
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWriteDataBus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadDataBus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8bits
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readID
</UL>

<P><STRONG><a name="[9b]"></a>readReg16Index</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tft.o(i.readReg16Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = readReg16Index &rArr; read8bits &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmdWord
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWriteDataBus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadDataBus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read8bits
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg40
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg32
</UL>

<P><STRONG><a name="[88]"></a>readReg32</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tft.o(i.readReg32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = readReg32 &rArr; readReg16Index &rArr; read8bits &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16Index
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readID
</UL>

<P><STRONG><a name="[89]"></a>readReg40</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tft.o(i.readReg40))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = readReg40 &rArr; readReg16Index &rArr; read8bits &rArr; delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16Index
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readID
</UL>

<P><STRONG><a name="[81]"></a>setReadDataBus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tft.o(i.setReadDataBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setReadDataBus &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16Index
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
</UL>

<P><STRONG><a name="[85]"></a>setWriteDataBus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tft.o(i.setWriteDataBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setWriteDataBus &rArr; LL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16Index
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_readGRAM
</UL>

<P><STRONG><a name="[97]"></a>testCircles</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, main.o(i.testCircles))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = testCircles &rArr; TFT_drawCircle &rArr; TFT_drawPixel &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;width
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;height
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>testFastLines</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, main.o(i.testFastLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = testFastLines &rArr; TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;width
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;height
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillScreen
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawFastVLine
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawFastHLine
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>testFillScreen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.testFillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = testFillScreen &rArr; TFT_fillScreen &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>testFilledCircles</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, main.o(i.testFilledCircles))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = testFilledCircles &rArr; TFT_fillCircle &rArr; TFT_fillCircleHelper &rArr; TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;width
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;height
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillScreen
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>testLines</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, main.o(i.testLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = testLines &rArr; TFT_drawLine &rArr; TFT_drawFastVLine &rArr; TFT_fillRect &rArr; TFT_setAddrWindow &rArr; WriteCmdParam4 &rArr; WriteCmdParamN &rArr; writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;width
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;height
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillScreen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_drawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>width</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tft.o(i.width))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tft.o(i.TFT_begin)
</UL>
<P><STRONG><a name="[9c]"></a>write8</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tft.o(i.write8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = write8
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataWord
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeDataByte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmdWord
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmdByte
</UL>

<P><STRONG><a name="[8d]"></a>writeCmdByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tft.o(i.writeCmdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = writeCmdByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write8
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParamN
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[8e]"></a>writeCmdWord</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, tft.o(i.writeCmdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeCmdWord &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write8
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16Index
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readReg16
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table16
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmd
</UL>

<P><STRONG><a name="[8f]"></a>writeDataByte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tft.o(i.writeDataByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = writeDataByte &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write8
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdParamN
</UL>

<P><STRONG><a name="[79]"></a>writeDataWord</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, tft.o(i.writeDataWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeDataWord &rArr; write8
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write8
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_fillRect
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table16
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCmdData
</UL>

<P><STRONG><a name="[90]"></a>yield</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i.yield))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[5f]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tft.o(i.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TFT_8bit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setWriteDataBus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setReadDataBus
</UL>

<P><STRONG><a name="[60]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tft.o(i.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TFT_8bit
</UL>

<P><STRONG><a name="[61]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, tft.o(i.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STM32_TFT_8bit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
