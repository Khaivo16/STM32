<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\STM32CppOutput\F4Cpp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\STM32CppOutput\F4Cpp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Aug 08 22:53:56 2025
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; HardwareTimer::setMode(unsigned, TimerModes_t, unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SVC_Handler</a><BR>
 <LI><a href="#[11]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">PendSV_Handler</a><BR>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from sys.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from sys.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from sys.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from sys.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from sys.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from sys.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from sys.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel1_IRQHandler</a> from sys.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel2_IRQHandler</a> from sys.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel3_IRQHandler</a> from sys.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel4_5_IRQHandler</a> from sys.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from sys.o(i.EXTI0_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from sys.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from sys.o(i.EXTI1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from sys.o(i.EXTI2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from sys.o(i.EXTI3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from sys.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from sys.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[50]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[15]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_TIM9_IRQHandler</a> from hardwaretimer.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from hardwaretimer.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from hardwaretimer.o(i.TIM1_TRG_COM_TIM11_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_TIM10_IRQHandler</a> from hardwaretimer.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from hardwaretimer.o(i.TIM2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from hardwaretimer.o(i.TIM3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from hardwaretimer.o(i.TIM4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from hardwaretimer.o(i.TIM5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[49]">TIM6_IRQHandler</a> from hardwaretimer.o(i.TIM6_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from hardwaretimer.o(i.TIM7_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_TIM12_IRQHandler</a> from hardwaretimer.o(i.TIM8_BRK_TIM12_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from hardwaretimer.o(i.TIM8_CC_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_TIM14_IRQHandler</a> from hardwaretimer.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_TIM13_IRQHandler</a> from hardwaretimer.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from sys.o(i.UART4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from sys.o(i.UART5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from sys.o(i.USART1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from sys.o(i.USART2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from sys.o(i.USART3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[54]">SPI_1_Init()</a> from sys.o(i._Z10SPI_1_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[55]">SPI_2_Init()</a> from sys.o(i._Z10SPI_2_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[56]">SPI_3_Init()</a> from sys.o(i._Z10SPI_3_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[57]">test_callback(HardwareTimer*)</a> from main.o(i._Z13test_callbackP13HardwareTimer) referenced from main.o(i.main)
 <LI><a href="#[53]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[59]">USARTClass::read()</a> from usartclass.o(i._ZN10USARTClass4readEv) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[58]">USARTClass::available()</a> from usartclass.o(i._ZN10USARTClass9availableEv) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[52]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[51]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[5b]">__sti___5_sys_c_pinMode</a> from sys.o(i.__sti___5_sys_c_pinMode) referenced from sys.o(.init_array)
 <LI><a href="#[5a]">__sti___6_main_c_test</a> from main.o(i.__sti___6_main_c_test) referenced from main.o(.init_array)
 <LI><a href="#[4f]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[51]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[68]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5f]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[d3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[d6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5c]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[53]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[ca]"></a>__rt_new_handler_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[65]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cpp_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[63]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[64]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[5e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[df]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[e0]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sys.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sys.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerClkSrc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerUpIrq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerCCIrq
</UL>

<P><STRONG><a name="[69]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[ce]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
</UL>

<P><STRONG><a name="[72]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[9c]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6a]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[6d]"></a>HAL_MspInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>

<P><STRONG><a name="[ba]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[80]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[6f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[6b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[71]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[73]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>

<P><STRONG><a name="[ae]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ad]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[74]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[75]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[77]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[76]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[8f]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[78]"></a>HAL_TIMEx_OCN_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_OCN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_OCN_Start &rArr; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[7a]"></a>HAL_TIMEx_PWMN_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_PWMN_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_PWMN_Start &rArr; TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[7b]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[7c]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timer.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableTimerClock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerUpIrq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerCCIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resume()
</UL>

<P><STRONG><a name="[82]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[87]"></a>HAL_TIM_IC_Start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[89]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_CC_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_BRK_TIM12_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_TRG_COM_TIM11_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[8a]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[96]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
</UL>

<P><STRONG><a name="[8b]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[8c]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hardwaretimer.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[9a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>SystemClock_Config</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM1_TRG_COM_TIM11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_TRG_COM_TIM11_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardwaretimer.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_BRK_TIM12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_BRK_TIM12_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hardwaretimer.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_UP_TIM13_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback &rArr; HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[88]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[92]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[85]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent4()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent5()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent1()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent2()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent3()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>OFF_system()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i._Z10OFF_systemv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OFF_system() &rArr; HardwareTimer::setCount(unsigned, TimerFormat_t) &rArr; HardwareTimer::getTimerClkFreq() &rArr; getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setCount(unsigned, TimerFormat_t)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>Dir_Conveyor()</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(i._Z12Dir_Conveyorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Dir_Conveyor() &rArr; HardwareTimer::setCount(unsigned, TimerFormat_t) &rArr; HardwareTimer::getTimerClkFreq() &rArr; getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setCount(unsigned, TimerFormat_t)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_callback(HardwareTimer*)
</UL>

<P><STRONG><a name="[a3]"></a>serialEvent1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent1v))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>serialEvent2()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent2v))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>serialEvent3()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent3v))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>serialEvent4()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent4v))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>serialEvent5()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent5v))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>test_callback(HardwareTimer*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i._Z13test_callbackP13HardwareTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = test_callback(HardwareTimer*) &rArr; Dir_Conveyor() &rArr; HardwareTimer::setCount(unsigned, TimerFormat_t) &rArr; HardwareTimer::getTimerClkFreq() &rArr; getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dir_Conveyor()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c8]"></a>get_timer_index(TIM_TypeDef*)</STRONG> (Thumb, 164 bytes, Stack size 36 bytes, hardwaretimer.o(i._Z15get_timer_indexP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = get_timer_index(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[b1]"></a>update(unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(i._Z6updatePh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = update(unsigned char*) &rArr; HardwareTimer::setCount(unsigned, TimerFormat_t) &rArr; HardwareTimer::getTimerClkFreq() &rArr; getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setCount(unsigned, TimerFormat_t)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setOverflow(unsigned, TimerFormat_t)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acti_step(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>ON_system()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i._Z9ON_systemv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ON_system() &rArr; HardwareTimer::resume() &rArr; HardwareTimer::resumeChannel(unsigned) &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resume()
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>acti_step(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i._Z9acti_steph))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = acti_step(unsigned char) &rArr; delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update(unsigned char*)
</UL>

<P><STRONG><a name="[b8]"></a>RingBuffer::store_char(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBuffer10store_charEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::store_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[b7]"></a>RingBuffer::RingBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::RingBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[e2]"></a>RingBuffer::RingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev), UNUSED)

<P><STRONG><a name="[a0]"></a>USARTClass::IrqHandler()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usartclass.o(i._ZN10USARTClass10IrqHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::store_char(unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>USARTClass::read()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[b9]"></a>USARTClass::begin(unsigned)</STRONG> (Thumb, 596 bytes, Stack size 88 bytes, usartclass.o(i._ZN10USARTClass5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USARTClass::begin(unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>USARTClass::available()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass9availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[cc]"></a>USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[e3]"></a>USARTClass::USARTClass__sub_object(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer), UNUSED)

<P><STRONG><a name="[bd]"></a>HardwareTimer::getChannel(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer10getChannelEj))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[b2]"></a>HardwareTimer::setOverflow(unsigned, TimerFormat_t)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hardwaretimer.o(i._ZN13HardwareTimer11setOverflowEj13TimerFormat_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HardwareTimer::setOverflow(unsigned, TimerFormat_t) &rArr; HardwareTimer::getTimerClkFreq() &rArr; getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update(unsigned char*)
</UL>

<P><STRONG><a name="[bf]"></a>HardwareTimer::getLLChannel(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer12getLLChannelEj))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[bc]"></a>HardwareTimer::resumeChannel(unsigned)</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, hardwaretimer.o(i._ZN13HardwareTimer13resumeChannelEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HardwareTimer::resumeChannel(unsigned) &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getIT(unsigned)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getAssociatedChannel(unsigned)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getLLChannel(unsigned)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getChannel(unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resume()
</UL>

<P><STRONG><a name="[98]"></a>HardwareTimer::updateCallback(TIM_HandleTypeDef*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardwaretimer.o(i._ZN13HardwareTimer14updateCallbackEP17TIM_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[d0]"></a>HardwareTimer::attachInterrupt(void(*)(HardwareTimer*))</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer15attachInterruptEPFvPS_E))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>HardwareTimer::getTimerClkFreq()</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, hardwaretimer.o(i._ZN13HardwareTimer15getTimerClkFreqEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HardwareTimer::getTimerClkFreq() &rArr; getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimerClkSrc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setCount(unsigned, TimerFormat_t)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setOverflow(unsigned, TimerFormat_t)
</UL>

<P><STRONG><a name="[c0]"></a>HardwareTimer::getAssociatedChannel(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer20getAssociatedChannelEj))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[83]"></a>HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hardwaretimer.o(i._ZN13HardwareTimer22captureCompareCallbackEP17TIM_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[be]"></a>HardwareTimer::getIT(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer5getITEj))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>

<P><STRONG><a name="[a8]"></a>HardwareTimer::pause()</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hardwaretimer.o(i._ZN13HardwareTimer5pauseEv))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dir_Conveyor()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFF_system()
</UL>

<P><STRONG><a name="[b5]"></a>HardwareTimer::resume()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hardwaretimer.o(i._ZN13HardwareTimer6resumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HardwareTimer::resume() &rArr; HardwareTimer::resumeChannel(unsigned) &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::resumeChannel(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_system()
</UL>

<P><STRONG><a name="[c5]"></a>HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)</STRONG> (Thumb, 556 bytes, Stack size 112 bytes, hardwaretimer.o(i._ZN13HardwareTimer7setModeEj12TimerModes_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HardwareTimer::setMode(unsigned, TimerModes_t, unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getAssociatedChannel(unsigned)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getChannel(unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>HardwareTimer::setCount(unsigned, TimerFormat_t)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hardwaretimer.o(i._ZN13HardwareTimer8setCountEj13TimerFormat_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HardwareTimer::setCount(unsigned, TimerFormat_t) &rArr; HardwareTimer::getTimerClkFreq() &rArr; getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update(unsigned char*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dir_Conveyor()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFF_system()
</UL>

<P><STRONG><a name="[c7]"></a>HardwareTimer::HardwareTimer(TIM_TypeDef*)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, hardwaretimer.o(i._ZN13HardwareTimerC1EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardwareTimer::HardwareTimer(TIM_TypeDef*) &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableTimerClock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer_index(TIM_TypeDef*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_test
</UL>

<P><STRONG><a name="[e4]"></a>HardwareTimer::HardwareTimer__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, hardwaretimer.o(i._ZN13HardwareTimerC1EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[cd]"></a>SPIClass::SPIClass(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[e5]"></a>SPIClass::SPIClass__sub_object(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE), UNUSED)

<P><STRONG><a name="[c9]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_test
</UL>

<P><STRONG><a name="[66]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[e6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[b6]"></a>delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acti_step(unsigned char)
</UL>

<P><STRONG><a name="[ac]"></a>digitalRead</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys.o(i.digitalRead))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dir_Conveyor()
</UL>

<P><STRONG><a name="[a7]"></a>digitalWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acti_step(unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_system()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dir_Conveyor()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFF_system()
</UL>

<P><STRONG><a name="[7e]"></a>enableTimerClock</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, timer.o(i.enableTimerClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enableTimerClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[81]"></a>getTimerCCIrq</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, timer.o(i.getTimerCCIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getTimerCCIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[c3]"></a>getTimerClkSrc</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, timer.o(i.getTimerClkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getTimerClkSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::getTimerClkFreq()
</UL>

<P><STRONG><a name="[7f]"></a>getTimerUpIrq</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, timer.o(i.getTimerUpIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getTimerUpIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[c1]"></a>get_timer_obj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i.get_timer_obj))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::captureCompareCallback(TIM_HandleTypeDef*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::updateCallback(TIM_HandleTypeDef*)
</UL>

<P><STRONG><a name="[4f]"></a>main</STRONG> (Thumb, 506 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main &rArr; HardwareTimer::setMode(unsigned, TimerModes_t, unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::attachInterrupt(void(*)(HardwareTimer*))
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::available()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::read()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ON_system()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update(unsigned char*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OFF_system()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[aa]"></a>pinMode</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, sys.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::setMode(unsigned, TimerModes_t, unsigned)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_Init()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_Init()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_Init()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__sti___6_main_c_test</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.__sti___6_main_c_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___6_main_c_test &rArr; operator new(unsigned) &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareTimer::HardwareTimer(TIM_TypeDef*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[70]"></a>NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._Z16NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[54]"></a>SPI_1_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_1_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[55]"></a>SPI_2_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[56]"></a>SPI_3_Init()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_3_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_3_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[5b]"></a>__sti___5_sys_c_pinMode</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sys.o(i.__sti___5_sys_c_pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___5_sys_c_pinMode &rArr; USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(SPI_TypeDef*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.init_array)
</UL>
<P><STRONG><a name="[af]"></a>USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usartclass.o(i._Z23USART_INT_ClearAllFlagsP13USART_TypeDef9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[91]"></a>TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i._Z17TIM_OC1_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[93]"></a>TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i._Z17TIM_OC3_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[94]"></a>TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i._Z17TIM_OC4_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig(TIM_TypeDef*, TIM_OC_InitTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[86]"></a>TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i._Z17TIM_TI2_SetConfigP11TIM_TypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_SetConfig(TIM_TypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[79]"></a>TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(i._Z18TIM_CCxNChannelCmdP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxNChannelCmd(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_PWMN_Start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_OCN_Start
</UL>

<P><STRONG><a name="[9b]"></a>UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i._Z14UART_SetConfigP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[cb]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[52]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
